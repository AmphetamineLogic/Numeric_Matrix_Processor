<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="14" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <HyperskillCourse>
          <option name="authors">
            <list />
          </option>
          <option name="courseMode" value="Study" />
          <option name="customPresentableName" />
          <option name="description" value="Hereâ€™s a project for devoted Matrix enthusiasts: learn to perform a variety of operations on matrices, including addition, multiplication, finding a determinant and dealing with inverse matrices. If you happen to be starting your technical major, this project is a good chance for you to learn matrices in action and not merely in your notebook.&lt;br/&gt;&lt;br/&gt;Learn more at &lt;a href=&quot;https://hyperskill.org&quot;&gt;https://hyperskill.org/projects/60&lt;/a&gt;" />
          <option name="environment" value="" />
          <option name="fromZip" value="false" />
          <option name="id" value="0" />
          <option name="index" value="-1" />
          <option name="language" value="JAVA 11" />
          <option name="languageCode" value="en" />
          <option name="name" value="Numeric Matrix Processor" />
          <option name="stages">
            <list>
              <HyperskillStage>
                <option name="id" value="323" />
                <option name="stepId" value="5465" />
                <option name="title" value="Addition" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="324" />
                <option name="stepId" value="5466" />
                <option name="title" value="Multiplication by number" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="325" />
                <option name="stepId" value="5467" />
                <option name="title" value="Matrix by matrix multiplication" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="326" />
                <option name="stepId" value="5468" />
                <option name="title" value="Transpose" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="327" />
                <option name="stepId" value="5469" />
                <option name="title" value="Determined!" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="328" />
                <option name="stepId" value="5470" />
                <option name="title" value="Inverse matrix" />
              </HyperskillStage>
            </list>
          </option>
          <option name="stepikChangeStatus" value="Up to date" />
          <option name="taskToTopics">
            <map>
              <entry key="0">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="259" />
                      <option name="theoryId" value="3805" />
                      <option name="title" value="IDE" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="15" />
                      <option name="theoryId" value="3500" />
                      <option name="title" value="Introduction to Java" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="147" />
                      <option name="theoryId" value="3522" />
                      <option name="title" value="Basic literals" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="148" />
                      <option name="theoryId" value="3521" />
                      <option name="title" value="The first program" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="193" />
                      <option name="theoryId" value="3749" />
                      <option name="title" value="Printing data" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="14" />
                      <option name="theoryId" value="3518" />
                      <option name="title" value="Types and variables" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="309" />
                      <option name="theoryId" value="5035" />
                      <option name="title" value="Primitive and reference types" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="4" />
                      <option name="theoryId" value="3511" />
                      <option name="title" value="Array" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="2">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="161" />
                      <option name="theoryId" value="3532" />
                      <option name="title" value="Sizes and ranges" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="32" />
                      <option name="theoryId" value="3510" />
                      <option name="title" value="Type casting" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="36" />
                      <option name="theoryId" value="3517" />
                      <option name="title" value="Floating-point types" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="33" />
                      <option name="theoryId" value="3504" />
                      <option name="title" value="Switch statement" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="94" />
                      <option name="theoryId" value="3590" />
                      <option name="title" value="Defining methods" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="99" />
                      <option name="theoryId" value="3594" />
                      <option name="title" value="Arrays as parameters" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="3">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="117" />
                      <option name="theoryId" value="3614" />
                      <option name="title" value="Introduction to OOP" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="31" />
                      <option name="theoryId" value="3514" />
                      <option name="title" value="Characters" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="9" />
                      <option name="theoryId" value="3523" />
                      <option name="title" value="String" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="115" />
                      <option name="theoryId" value="3618" />
                      <option name="title" value="Defining classes" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="7" />
                      <option name="theoryId" value="3621" />
                      <option name="title" value="Package" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="17" />
                      <option name="theoryId" value="3535" />
                      <option name="title" value="Constructor" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="96" />
                      <option name="theoryId" value="4727" />
                      <option name="title" value="Objects" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="116" />
                      <option name="theoryId" value="3495" />
                      <option name="title" value="Instance methods" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="28" />
                      <option name="theoryId" value="3589" />
                      <option name="title" value="Access modifiers" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="24" />
                      <option name="theoryId" value="3599" />
                      <option name="title" value="Getters and setters" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="38" />
                      <option name="theoryId" value="3534" />
                      <option name="title" value="Static members" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="121" />
                      <option name="theoryId" value="3533" />
                      <option name="title" value="Initialization blocks" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="4">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="266" />
                      <option name="theoryId" value="4953" />
                      <option name="title" value="Computer algorithms" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="410" />
                      <option name="theoryId" value="5984" />
                      <option name="title" value="Recursion basics" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="132" />
                      <option name="theoryId" value="3550" />
                      <option name="title" value="Recursion" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="5">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="98" />
                      <option name="theoryId" value="3551" />
                      <option name="title" value="Processing strings" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="66" />
                      <option name="theoryId" value="3501" />
                      <option name="title" value="Math library" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
            </map>
          </option>
          <option name="updateDate" value="0" />
          <option name="hyperskillProject">
            <HyperskillProject>
              <option name="description" value="Hereâ€™s a project for devoted Matrix enthusiasts: learn to perform a variety of operations on matrices, including addition, multiplication, finding a determinant and dealing with inverse matrices. If you happen to be starting your technical major, this project is a good chance for you to learn matrices in action and not merely in your notebook." />
              <option name="id" value="60" />
              <option name="ideFiles" value="https://stepik.org/media/attachments/lesson/210082/additional_files.json" />
              <option name="language" value="java" />
              <option name="title" value="Numeric Matrix Processor" />
              <option name="useIde" value="true" />
            </HyperskillProject>
          </option>
          <option name="items">
            <list>
              <FrameworkLesson>
                <option name="currentTaskIndex" value="4" />
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="1" />
                <option name="name" value="Numeric Matrix Processor" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Matrices can be presented in a code like 2D-arrays. They have many cases where they can be applied: digital image processing, graph representation, and algorithms on a graph, drawing graphics, graphics effects, applied maths, statistics, physics and much more.&lt;/p&gt;&#10;&#10;&lt;p&gt;TheÂ matrix general formÂ looks like this:&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;img alt=&quot;&quot; height=&quot;117&quot; src=&quot;https://lh4.googleusercontent.com/lyPtoX-fYvmHeSHJok08_dYBdpwZnvF0NGLQppMh6h_uXH3Zvl_CeK-mhGORw0O6R3rzP4_m8TSpxvQskuC06hSdCOCHM-ShJ2-zGzeeXZ197ozK__2WnNkXtwLYrZH-j4fHXxzc&quot; width=&quot;213&quot;&gt;&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;As you can see, it contains N rows and M columns.&lt;/p&gt;&#10;&#10;&lt;p&gt;Letâ€™s start with adding matrices.&lt;/p&gt;&#10;&#10;&lt;p&gt;Two matrices must have an equal number of rows and columns to be added. The sum of two matrices &lt;span class=&quot;math-tex&quot;&gt;\( A \)&lt;/span&gt; and &lt;span class=&quot;math-tex&quot;&gt;\( B \)&lt;/span&gt; will be a matrix which has the same number of rows and columns as do &lt;span class=&quot;math-tex&quot;&gt;\( A \)&lt;/span&gt; and &lt;span class=&quot;math-tex&quot;&gt;\( B \)&lt;/span&gt;. The sum of &lt;span class=&quot;math-tex&quot;&gt;\( A \)&lt;/span&gt; and &lt;span class=&quot;math-tex&quot;&gt;\( B \)&lt;/span&gt;, denoted &lt;span class=&quot;math-tex&quot;&gt;\( A + B \)&lt;/span&gt; or &lt;span class=&quot;math-tex&quot;&gt;\( B + A \)&lt;/span&gt;, is computed by adding corresponding elements of &lt;span class=&quot;math-tex&quot;&gt;\( A \)&lt;/span&gt; and &lt;span class=&quot;math-tex&quot;&gt;\( B \)&lt;/span&gt;: &lt;span class=&quot;math-tex&quot;&gt;\( A_{i \times j} + B_{i \times j} \)&lt;/span&gt;. Notice that the first element in the index &lt;span class=&quot;math-tex&quot;&gt;\( i \times j \)&lt;/span&gt; represents a number of rows, the second represents a number of columns. The general formula for adding two matrices are shown below:&lt;/p&gt;&#10;&#10;&lt;p&gt;Â &lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;img alt=&quot;&quot; height=&quot;233&quot; src=&quot;https://lh5.googleusercontent.com/bo6gqpBdg8oezCehaenqdTv7IxM32k38_r-I5mQCI3Zn47bg0UrRDzfsX8gtdBTK75jsv4JvmcLnz7Dyk8pp9EtZA9euCdzTn2WvCllcJws5qLv4PG78r-UyVw8LqkobFArFKTeW&quot; width=&quot;503&quot;&gt;&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Here is the example with numbers:&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;img alt=&quot;&quot; height=&quot;120&quot; src=&quot;https://lh4.googleusercontent.com/yIuqlsXlsWp1IFE3o0OFH_SRjocDdK8l_8vmC2xSh0NMdAffPuYeVzRlj5JmR3ry7hsx3a3GPvg2fgRcWTfRUFiYW4lpqO_4O3O1oFj2gVwIWgSEWgm5DY_atIm85ykk_IWELL4f&quot; width=&quot;505&quot;&gt;&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;In this stage, you should write a program that output sum of &lt;span class=&quot;math-tex&quot;&gt;\( A \)&lt;/span&gt; and &lt;span class=&quot;math-tex&quot;&gt;\( B \)&lt;/span&gt; matrices.&lt;/p&gt;&#10;&#10;&lt;p&gt;The first line of standard input is a number of rows N and number of columns M of &lt;span class=&quot;math-tex&quot;&gt;\( A \)&lt;/span&gt; matrix. Next N lines are &lt;span class=&quot;math-tex&quot;&gt;\( A \)&lt;/span&gt; matrixâ€™s elements. Next line after empty line is a number of rows N and number of columns M of &lt;span class=&quot;math-tex&quot;&gt;\( B \)&lt;/span&gt; matrix. Next N lines are &lt;span class=&quot;math-tex&quot;&gt;\( B \)&lt;/span&gt; matrixâ€™s elements.&lt;/p&gt;&#10;&#10;&lt;p&gt;You should output the result of a sum of A and B matrices or &lt;code&gt;ERROR&lt;/code&gt; message if itâ€™s impossible.&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/60/stages/323/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5465" />
                      <option name="index" value="1" />
                      <option name="name" value="Addition" />
                      <option name="record" value="4" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="src/processor/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/processor/Main.java" />
                                <option name="text" value="package processor;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Hello World!&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/NumericMatrixProcessorTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/NumericMatrixProcessorTest.java" />
                                <option name="text" value="import org.hyperskill.hstest.v4.stage.MainMethodTest;&#10;import org.hyperskill.hstest.v4.testcase.CheckResult;&#10;import org.hyperskill.hstest.v4.testcase.PredefinedIOTestCase;&#10;import processor.Main;&#10;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;public class NumericMatrixProcessorTest extends MainMethodTest {&#10;    public NumericMatrixProcessorTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;&#10;    @Override&#10;    public List&lt;PredefinedIOTestCase&gt; generatePredefinedInputOutput() {&#10;        return List.of(&#10;            new PredefinedIOTestCase(&#10;                &quot;4 5\n&quot; +&#10;                    &quot;1 2 3 4 5\n&quot; +&#10;                    &quot;3 2 3 2 1\n&quot; +&#10;                    &quot;8 0 9 9 1\n&quot; +&#10;                    &quot;1 3 4 5 6\n&quot; +&#10;                    &quot;4 5\n&quot; +&#10;                    &quot;1 1 4 4 5\n&quot; +&#10;                    &quot;4 4 5 7 8\n&quot; +&#10;                    &quot;1 2 3 9 8\n&quot; +&#10;                    &quot;1 0 0 0 1&quot;,&#10;                &quot;2 3 7 8 10\n&quot; +&#10;                    &quot;7 6 8 9 9\n&quot; +&#10;                    &quot;9 2 12 18 9\n&quot; +&#10;                    &quot;2 3 4 5 7&quot;&#10;            ),&#10;&#10;            new PredefinedIOTestCase(&#10;                &quot;2 3\n&quot; +&#10;                    &quot;1 4 5\n&quot; +&#10;                    &quot;4 5 5\n&quot; +&#10;                    &quot;4 5\n&quot; +&#10;                    &quot;0 1 0 4 5\n&quot; +&#10;                    &quot;1 7 8 9 4\n&quot; +&#10;                    &quot;1 2 3 5 6\n&quot; +&#10;                    &quot;1 3 4 3 8&quot;,&#10;                &quot;ERROR&quot;&#10;            ),&#10;&#10;            new PredefinedIOTestCase(&#10;                &quot;4 5\n&quot; +&#10;                    &quot;4 2 3 4 5 \n&quot; +&#10;                    &quot;3 5 3 2 1\n&quot; +&#10;                    &quot;8 0 9 9 1\n&quot; +&#10;                    &quot;1 3 4 5 9\n&quot; +&#10;                    &quot;4 5\n&quot; +&#10;                    &quot;1 1 4 4 5\n&quot; +&#10;                    &quot;4 4 5 7 8\n&quot; +&#10;                    &quot;1 2 3 9 8\n&quot; +&#10;                    &quot;1 0 0 0 1&quot;,&#10;                &quot;5 3 7 8 10\n&quot; +&#10;                    &quot;7 9 8 9 9\n&quot; +&#10;                    &quot;9 2 12 18 9\n&quot; +&#10;                    &quot;2 3 4 5 10&quot;&#10;            ),&#10;&#10;            new PredefinedIOTestCase(&#10;                &quot;1 1\n&quot; +&#10;                    &quot;1\n&quot; +&#10;                    &quot;1 1\n&quot; +&#10;                    &quot;2&quot;,&#10;                &quot;3&quot;&#10;            ),&#10;&#10;            new PredefinedIOTestCase(&#10;                &quot;1 2\n&quot; +&#10;                    &quot;3 4\n&quot; +&#10;                    &quot;1 2\n&quot; +&#10;                    &quot;5 6&quot;,&#10;                &quot;8 10&quot;&#10;            ),&#10;&#10;            new PredefinedIOTestCase(&#10;                &quot;2 1\n&quot; +&#10;                    &quot;1\n&quot; +&#10;                    &quot;2\n&quot; +&#10;                    &quot;2 1\n&quot; +&#10;                    &quot;2\n&quot; +&#10;                    &quot;1&quot;,&#10;                &quot;3\n&quot; +&#10;                    &quot;3&quot;&#10;            ),&#10;&#10;            new PredefinedIOTestCase(&#10;                &quot;2 1\n&quot; +&#10;                    &quot;2\n&quot; +&#10;                    &quot;1\n&quot; +&#10;                    &quot;1 2\n&quot; +&#10;                    &quot;1 2&quot;,&#10;                &quot;ERROR&quot;&#10;            )&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult checkSolved(String reply, String clue) {&#10;&#10;        clue = clue.strip();&#10;        reply = reply.strip();&#10;&#10;        if (reply.equals(clue)) {&#10;            return CheckResult.TRUE;&#10;        }&#10;&#10;        if (clue.equals(&quot;ERROR&quot;)) {&#10;            return CheckResult.FALSE;&#10;        }&#10;&#10;        List&lt;String&gt; user = reply.lines().collect(Collectors.toList());&#10;        List&lt;String&gt; answ = clue.lines().collect(Collectors.toList());&#10;&#10;        if (user.size() != answ.size()) {&#10;            return CheckResult.FALSE;&#10;        }&#10;&#10;        for (int i = 0; i &lt; user.size(); i++) {&#10;            String userLine = user.get(i).strip();&#10;            String answLine = answ.get(i).strip();&#10;            if (!userLine.equals(answLine)) {&#10;                return CheckResult.FALSE;&#10;            }&#10;        }&#10;&#10;        return new CheckResult(true);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1559846283000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage, you should write a program that multiplies a matrix to a constant. To do this you need just enough to multiply every element of this matrix on this constant. You can see the example in the picture below:&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;img alt=&quot;&quot; height=&quot;106&quot; src=&quot;https://lh4.googleusercontent.com/pjYMirdvnA_0O9gpwPKurI-vKOxvjNDPUeR_3-LGqc5DEHCSd06sBXKgmd9TVTJ53fewunQBOskyo6bxdPhF340St4Oq-KQc67P0GIB78oVBSwsQq-FMWlARxPgQWxjcQR1yYTIk&quot; width=&quot;439&quot;&gt;&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;The first line of standard input is numbers N and M. Next N lines are elements of a matrix. The last line contains a constant.&lt;/p&gt;&#10;&#10;&lt;p&gt;You should output a result of the multiplication of the given matrix to the given constant.&lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/60/stages/324/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5466" />
                      <option name="index" value="2" />
                      <option name="name" value="Multiplication by number" />
                      <option name="record" value="1" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="test/NumericMatrixProcessorTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/NumericMatrixProcessorTest.java" />
                                <option name="text" value="import org.hyperskill.hstest.v4.stage.MainMethodTest;&#10;import org.hyperskill.hstest.v4.testcase.CheckResult;&#10;import org.hyperskill.hstest.v4.testcase.PredefinedIOTestCase;&#10;import processor.Main;&#10;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;public class NumericMatrixProcessorTest extends MainMethodTest {&#10;    public NumericMatrixProcessorTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;&#10;    @Override&#10;    public List&lt;PredefinedIOTestCase&gt; generatePredefinedInputOutput() {&#10;        return List.of(&#10;            new PredefinedIOTestCase(&#10;                &quot;3 3\n&quot; +&#10;                    &quot;1 2 3\n&quot; +&#10;                    &quot;4 5 6\n&quot; +&#10;                    &quot;7 8 9\n&quot; +&#10;                    &quot;3&quot;,&#10;                &quot;3 6 9\n&quot; +&#10;                    &quot;12 15 18\n&quot; +&#10;                    &quot;21 24 27&quot;&#10;            ),&#10;&#10;            new PredefinedIOTestCase(&#10;                &quot;2 3\n&quot; +&#10;                    &quot;1 2 3\n&quot; +&#10;                    &quot;4 5 6\n&quot; +&#10;                    &quot;0&quot;,&#10;                &quot;0 0 0\n&quot; +&#10;                    &quot;0 0 0&quot;&#10;            ),&#10;&#10;            new PredefinedIOTestCase(&#10;                &quot;5 5 \n&quot; +&#10;                    &quot;1 4 6 7 8\n&quot; +&#10;                    &quot;1 9 5 2 2\n&quot; +&#10;                    &quot;1 4 3 5 7\n&quot; +&#10;                    &quot;1 4 6 4 1\n&quot; +&#10;                    &quot;1 4 5 7 1\n&quot; +&#10;                    &quot;5&quot;,&#10;                &quot;5 20 30 35 40\n&quot; +&#10;                    &quot;5 45 25 10 10\n&quot; +&#10;                    &quot;5 20 15 25 35\n&quot; +&#10;                    &quot;5 20 30 20 5\n&quot; +&#10;                    &quot;5 20 25 35 5&quot;&#10;            ),&#10;&#10;            new PredefinedIOTestCase(&#10;                &quot;1 1\n&quot; +&#10;                    &quot;1\n&quot; +&#10;                    &quot;1&quot;,&#10;                &quot;1&quot;&#10;            ),&#10;&#10;            new PredefinedIOTestCase(&#10;                &quot;1 1\n&quot; +&#10;                    &quot;0\n&quot; +&#10;                    &quot;1&quot;,&#10;                &quot;0&quot;&#10;            ),&#10;&#10;            new PredefinedIOTestCase(&#10;                &quot;3 2\n&quot; +&#10;                    &quot;1 2\n&quot; +&#10;                    &quot;8 1\n&quot; +&#10;                    &quot;9 1\n&quot; +&#10;                    &quot;10&quot;,&#10;                &quot;10 20\n&quot; +&#10;                    &quot;80 10\n&quot; +&#10;                    &quot;90 10&quot;&#10;            )&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult checkSolved(String reply, String clue) {&#10;&#10;        clue = clue.strip();&#10;        reply = reply.strip();&#10;&#10;        if (reply.equals(clue)) {&#10;            return CheckResult.TRUE;&#10;        }&#10;&#10;        if (clue.equals(&quot;ERROR&quot;)) {&#10;            return CheckResult.FALSE;&#10;        }&#10;&#10;        List&lt;String&gt; user = reply.lines().collect(Collectors.toList());&#10;        List&lt;String&gt; answ = clue.lines().collect(Collectors.toList());&#10;&#10;        if (user.size() != answ.size()) {&#10;            return CheckResult.FALSE;&#10;        }&#10;&#10;        for (int i = 0; i &lt; user.size(); i++) {&#10;            String userLine = user.get(i).strip();&#10;            String answLine = answ.get(i).strip();&#10;            if (!userLine.equals(answLine)) {&#10;                return CheckResult.FALSE;&#10;            }&#10;        }&#10;&#10;        return new CheckResult(true);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/processor/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/processor/Main.java" />
                                <option name="text" value="package processor;&#10;&#10;import java.util.Scanner;&#10;&#10;public class Main {&#10;    static Scanner scanner = new Scanner(System.in);&#10;    public static void main(String[] args) {&#10;&#10;        int n = scanner.nextInt();&#10;        int m = scanner.nextInt();&#10;        int[][] matrixA = fillMatrix(n, m);&#10;&#10;        scanner.nextLine();&#10;&#10;        n = scanner.nextInt();&#10;        m = scanner.nextInt();&#10;        int[][] matrixB = fillMatrix(n, m);&#10;&#10;        int[][] sum = sumMatrix(matrixA, matrixB);&#10;        if (sum == null) {&#10;            System.out.println(&quot;ERROR&quot;);&#10;        }&#10;        else {&#10;            printMatrix(sum);&#10;        }&#10;//        printMatrix(matrixA);&#10;//        printMatrix(matrixB);&#10;&#10;    }&#10;&#10;    static int[][] fillMatrix(int n, int m) {&#10;//        Scanner scanner = new Scanner(System.in);&#10;        int[][] matrix = new int[n][m];&#10;        for (int i = 0; i &lt; n; i++) {&#10;            for (int j = 0; j &lt; m; j++) {&#10;                matrix[i][j] = scanner.nextInt();&#10;            }&#10;        }&#10;        return matrix;&#10;    }&#10;&#10;    static void printMatrix(int[][] matrix) {&#10;        int n = matrix.length;&#10;        int m = matrix[0].length;&#10;        for (int i = 0; i &lt; n; i++) {&#10;            for (int j = 0; j &lt; m; j++) {&#10;                System.out.print(matrix[i][j] + &quot; &quot;);&#10;            }&#10;            System.out.println();&#10;        }&#10;    }&#10;&#10;    static int[][] sumMatrix (int[][] matrixA, int[][] matrixB) {&#10;        int n = matrixA.length;&#10;        int m = matrixA[0].length;&#10;&#10;        int[][] result;&#10;&#10;        if (n != matrixB.length &amp;&amp; m != matrixB[0].length) {&#10;            result = null;&#10;        }&#10;        else {&#10;            result = new int[n][m];&#10;            for (int i = 0; i &lt; n; i++) {&#10;                for (int j = 0; j &lt; m; j++) {&#10;                    result[i][j] = matrixA[i][j] + matrixB[i][j];&#10;                }&#10;&#10;            }&#10;        }&#10;&#10;        return result;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1559846283000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Next stage - multiplication of matrices. This operation is more complex than you might think because itâ€™s not enough to multiply corresponding elements to get true multiplication of matrices. Multiplication of &lt;span class=&quot;math-tex&quot;&gt;\( A _{n \times m} \)&lt;/span&gt; matrix with N rows and M columns and &lt;span class=&quot;math-tex&quot;&gt;\( B_{m \times k} \)&lt;/span&gt; matrix with M rows and K columns is &lt;span class=&quot;math-tex&quot;&gt;\( C_{n \times k} = A_{n \times m} * B_{m \times k} \)&lt;/span&gt; matrix with N rows and K columns where every element is a sum of multiplication M elements across rows of A matrix on M elements down columns of B matrix. Notice how sizes of matrices are different - the only restriction is that the number of columns for the first matrix should be equal to the number of rows for the second matrix. Check out &lt;a href=&quot;http://https://www.youtube.com/watch?v=XkY2DOUCWMU&amp;amp;list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab&amp;amp;index=5&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;this&lt;/a&gt; video about matrix multiplication. The formula for the single element is shown below:&lt;/p&gt;&#10;&#10;&lt;p&gt;Notice, that the &lt;span class=&quot;math-tex&quot;&gt;\( A_{i \times j} * B_{j \times k} \)&lt;/span&gt; is not equals to &lt;span class=&quot;math-tex&quot;&gt;\( B_{j \times k} * A_{i \times j} \)&lt;/span&gt;. In fact, it is even not possible to multiply if &lt;span class=&quot;math-tex&quot;&gt;\( k \ne i. \)&lt;/span&gt; And if &lt;span class=&quot;math-tex&quot;&gt;\( k = i \)&lt;/span&gt;, the resulting matrices still would be different.&lt;/p&gt;&#10;&#10;&lt;p&gt;Take a look at this example:&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;img alt=&quot;&quot; height=&quot;167&quot; src=&quot;https://lh3.googleusercontent.com/RWSHwOz3GsEXbICSUSIXhFcoYPSFZ93HPO3fdYZUmOKy1aXO3DmnL0M5Eu3bcnBJpLYTsnXnytF0EB9ZD6s17KF_fAsb0W8C0ZVsMXExJzFjcq2agaJToSQTWioYZiXaNIgylFfy&quot; width=&quot;602&quot;&gt;&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Write a program that output multiplication of &lt;span class=&quot;math-tex&quot;&gt;\( A \)&lt;/span&gt; and &lt;span class=&quot;math-tex&quot;&gt;\( B \)&lt;/span&gt; matrices. Also, you should write the main menu where you can apply different operations on matrices. Also, you should support floating-point numbers.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Below is an example of how your output might look.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;1. Add matrices&#10;2. Multiply matrix to a constant&#10;3. Multiply matrices&#10;0. Exit&#10;Your choice: 3&#10;Enter size of first matrix: 3 3&#10;Enter first matrix:&#10;1 7 7&#10;6 6 4&#10;4 2 1&#10;Enter size of second matrix: 3 3&#10;3 2 4&#10;5 5 9&#10;8 0 10&#10;The multiplication result is:&#10;94 37 137&#10;80 42 118&#10;30 18 44&#10;&#10;1. Add matrices&#10;2. Multiply matrix to a constant&#10;3. Multiply matrices&#10;0. Exit&#10;Your choice: 0&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Â &lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/60/stages/325/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5467" />
                      <option name="index" value="3" />
                      <option name="name" value="Matrix by matrix multiplication" />
                      <option name="record" value="2" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="test/NumericMatrixProcessorTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/NumericMatrixProcessorTest.java" />
                                <option name="text" value="import org.hyperskill.hstest.v4.stage.MainMethodTest;&#10;import processor.Main;&#10;&#10;import org.hyperskill.hstest.v4.testcase.CheckResult;&#10;import org.hyperskill.hstest.v4.testcase.TestCase;&#10;&#10;&#10;import java.util.*;&#10;import static java.lang.Math.abs;&#10;&#10;&#10;class TestClue {&#10;&#10;    String feedback;&#10;    ArrayList&lt;Double&gt; answers;&#10;&#10;    TestClue(String feedback, Double[] answers) {&#10;        this.feedback = feedback;&#10;        this.answers = new ArrayList&lt;&gt;(Arrays.asList(answers));&#10;    }&#10;}&#10;&#10;public class NumericMatrixProcessorTest extends MainMethodTest&lt;TestClue&gt; {&#10;&#10;    public NumericMatrixProcessorTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;TestClue&gt;&gt; generateTestCases() {&#10;        return List.of(&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices adding algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        7d, 13d, 132d,&#10;                        17d, 23d, 45d,&#10;                        65d, 57d, 78d&#10;                    }))&#10;                .setInput(&#10;                    &quot;1\n&quot;+&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;3 4 55\n&quot; +&#10;                        &quot;4 1 1\n&quot; +&#10;                        &quot;9 0 0\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;4 9 77\n&quot; +&#10;                        &quot;13 22 44\n&quot; +&#10;                        &quot;56 57 78\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices adding algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        43.13d, 911.62d, 1311.8d, 136.53d,&#10;                        -4.2d, 141.1d, -1.09d, 1421.6d,&#10;                        230.33d, 114.2d, 100.7d, 990.4d,&#10;                        956.72d, 168.94d, 112.16d, 27.0d&#10;                    }))&#10;                .setInput(&#10;                    &quot;1\n&quot;+&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;-0.3 677.4 435.2 123.33\n&quot; +&#10;                        &quot;1.3 141.4 0.11 1411.4\n&quot; +&#10;                        &quot;231.33 113.4 99.9 999.9\n&quot; +&#10;                        &quot;1002.22 123.44 55.66 13.3\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;43.43 234.22 876.6 13.2\n&quot; +&#10;                        &quot;-5.5 -0.3 -1.2 10.2\n&quot; +&#10;                        &quot;-1.0 0.8 0.8 -9.5\n&quot; +&#10;                        &quot;-45.5 45.5 56.5 13.7\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if multiplication matrix on constant algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        187d, 3978d, 7548d,&#10;                        7752d, 5831d, 3774d,&#10;                        16949d, 7752d, 7752d&#10;                    }))&#10;                .setInput(&#10;                    &quot;2\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;11 234 444\n&quot; +&#10;                        &quot;456 343 222\n&quot; +&#10;                        &quot;997 456 456\n&quot; +&#10;                        &quot;17\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if multiplication matrix on constant algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        1123653d, 5933505d, 110927295d, 2365632d,&#10;                        1505049d, 8619594d, 25665531d, 3833274d,&#10;                        1366632d, 2598732d ,37999962d, 58303305d,&#10;                        11068143d, 9781653d ,13666653d ,13443321d&#10;                    }))&#10;                .setInput(&#10;                    &quot;2\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;10123 53455 999345 21312\n&quot; +&#10;                        &quot;13559 77654 231221 34534\n&quot; +&#10;                        &quot;12312 23412 342342 525255\n&quot; +&#10;                        &quot;99713 88123 123123 121111\n&quot; +&#10;                        &quot;111\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices multiplication algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        45d, 113d, 11d, 266d,&#10;                        84d, 139d, 29d, 229d,&#10;                        45d, 49d, 35d, 100d,&#10;                        15d, 86d, 0d, 281d ,&#10;                    }))&#10;                .setInput(&#10;                    &quot;3\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;1 2 2 7\n&quot; +&#10;                        &quot;3 3 4 5\n&quot; +&#10;                        &quot;5 0 0 1\n&quot; +&#10;                        &quot;0 1 0 8\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;9 8 7 13\n&quot; +&#10;                        &quot;15 14 0 1\n&quot; +&#10;                        &quot;3 7 2 3\n&quot; +&#10;                        &quot;0 9 0 35\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices multiplication algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        243d, 295d, 78d, 60d,&#10;                        724d, 798d, 2063d, 175d&#10;                    }))&#10;                .setInput(&#10;                    &quot;3\n&quot; +&#10;                        &quot;2 3\n&quot; +&#10;                        &quot;1 0 17\n&quot; +&#10;                        &quot;15 19 7\n&quot; +&#10;                        &quot;3 4\n&quot; +&#10;                        &quot;5 6 78 9\n&quot; +&#10;                        &quot;29 31 47 1\n&quot; +&#10;                        &quot;14 17 0 3\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices multiplication algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        100d, 105d,&#10;                        130d, 43d,&#10;                        48d, 53d&#10;                    }))&#10;                .setInput(&#10;                    &quot;3\n&quot; +&#10;                        &quot;3 5\n&quot; +&#10;                        &quot;1 4 5 6 6\n&quot; +&#10;                        &quot;7 8 9 0 0\n&quot; +&#10;                        &quot;4 1 2 2 2\n&quot; +&#10;                        &quot;5 2\n&quot; +&#10;                        &quot;4 5\n&quot; +&#10;                        &quot;6 1\n&quot; +&#10;                        &quot;6 0\n&quot; +&#10;                        &quot;0 9\n&quot; +&#10;                        &quot;7 7\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices multiplication algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        -3728.685d, 3752.621d, 4367.396d, 1074.785d,&#10;                        246.11d, -228.39d, -396.2d, 29.71d,&#10;                        73.32d, -67.679d, -87.43, 25.04d,&#10;                        -39.22d, 42.02d, 55.6d, -119.42d&#10;                    }))&#10;                .setInput(&#10;                    &quot;3\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;0.65 0.67 76.4 23.2\n&quot; +&#10;                        &quot;-0.7 -13.1 -7.2 9.2\n&quot; +&#10;                        &quot;-0.7 -5.5 -1.5 0.4\n&quot; +&#10;                        &quot;-1.0 12.6 0.8 -0.4\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;-5.5 -0.3 -1.2 10.2\n&quot; +&#10;                        &quot;-1.0 0.8 0.8 -9.5\n&quot; +&#10;                        &quot;-45.5 45.5 56.5 13.7\n&quot; +&#10;                        &quot;-10.7 11.9 2.2 1.2\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if you can do more than one operation in a loop&quot;,&#10;                    new Double[]{&#10;                        -3728.685d, 3752.621d, 4367.396d, 1074.785d,&#10;                        246.11d, -228.39d, -396.2d, 29.71d,&#10;                        73.32d, -67.679d, -87.43, 25.04d,&#10;                        -39.22d, 42.02d, 55.6d, -119.42d,&#10;                        100d, 105d,&#10;                        130d, 43d,&#10;                        48d, 53d&#10;                    }))&#10;                .setInput(&#10;                    &quot;3\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;0.65 0.67 76.4 23.2\n&quot; +&#10;                        &quot;-0.7 -13.1 -7.2 9.2\n&quot; +&#10;                        &quot;-0.7 -5.5 -1.5 0.4\n&quot; +&#10;                        &quot;-1.0 12.6 0.8 -0.4\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;-5.5 -0.3 -1.2 10.2\n&quot; +&#10;                        &quot;-1.0 0.8 0.8 -9.5\n&quot; +&#10;                        &quot;-45.5 45.5 56.5 13.7\n&quot; +&#10;                        &quot;-10.7 11.9 2.2 1.2\n&quot; +&#10;                        &quot;3\n&quot; +&#10;                        &quot;3 5\n&quot; +&#10;                        &quot;1 4 5 6 6\n&quot; +&#10;                        &quot;7 8 9 0 0\n&quot; +&#10;                        &quot;4 1 2 2 2\n&quot; +&#10;                        &quot;5 2\n&quot; +&#10;                        &quot;4 5\n&quot; +&#10;                        &quot;6 1\n&quot; +&#10;                        &quot;6 0\n&quot; +&#10;                        &quot;0 9\n&quot; +&#10;                        &quot;7 7\n&quot; +&#10;                        &quot;0&quot;)&#10;        );&#10;    }&#10;&#10;&#10;    @Override&#10;    public CheckResult check(String reply, TestClue clue) {&#10;&#10;        try {&#10;&#10;            String[] strNumbers = reply.lines()&#10;                .filter(line -&gt; {&#10;                    line = line.strip();&#10;                    if (line.length() == 0) {&#10;                        return false;&#10;                    }&#10;                    for (char c : line.toCharArray()) {&#10;                        if (!(c == ' ' ||&#10;                            c &gt;= '0' &amp;&amp; c &lt;= '9' ||&#10;                            c == '.' ||&#10;                            c == '-' || c == '+' ||&#10;                            c == 'e' || c == 'E')) {&#10;                            return false;&#10;                        }&#10;                    }&#10;                    return true;&#10;                }).reduce(&quot;&quot;, (a, b) -&gt; a + &quot; &quot; + b)&#10;                .strip().split(&quot;\\s+&quot;);&#10;&#10;            double[] actual = Arrays.stream(strNumbers).mapToDouble(Double::parseDouble).toArray();&#10;&#10;            double[] expected =&#10;                clue.answers.stream()&#10;                    .mapToDouble(e -&gt; e)&#10;                    .toArray();&#10;            if (actual.length != expected.length) {&#10;                return new CheckResult(false, clue.feedback);&#10;            }&#10;&#10;            for (int i = 0; i &lt; actual.length; i++) {&#10;                if (abs(actual[i] - expected[i]) &gt; 0.01) {&#10;                    return new CheckResult(false, clue.feedback);&#10;                }&#10;            }&#10;        }&#10;        catch (Exception ex) {&#10;            return new CheckResult(false, &quot;Can't check the answer&quot;);&#10;        }&#10;&#10;        return CheckResult.TRUE;&#10;&#10;    }&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/processor/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/processor/Main.java" />
                                <option name="text" value="package processor;&#10;&#10;import java.util.Scanner;&#10;&#10;public class Main {&#10;    private static Scanner scanner = new Scanner(System.in);&#10;    public static void main(String[] args) {&#10;&#10;        int n = scanner.nextInt();&#10;        int m = scanner.nextInt();&#10;        int[][] matrixA = fillMatrix(n, m);&#10;        int constant = scanner.nextInt();&#10;&#10;        printMatrix(multiplyOnConstant(matrixA, constant));&#10;        /*scanner.nextLine();&#10;&#10;        n = scanner.nextInt();&#10;        m = scanner.nextInt();&#10;        int[][] matrixB = fillMatrix(n, m);&#10;&#10;        int[][] sum = sumMatrix(matrixA, matrixB);&#10;        if (sum == null) {&#10;            System.out.println(&quot;ERROR&quot;);&#10;        }&#10;        else {&#10;            printMatrix(sum);&#10;        }*/&#10;    }&#10;&#10;    static int[][] fillMatrix(int n, int m) {&#10;        int[][] matrix = new int[n][m];&#10;        for (int i = 0; i &lt; n; i++) {&#10;            for (int j = 0; j &lt; m; j++) {&#10;                matrix[i][j] = scanner.nextInt();&#10;            }&#10;        }&#10;        return matrix;&#10;    }&#10;&#10;    private static void printMatrix(int[][] matrix) {&#10;        int n = matrix.length;&#10;        int m = matrix[0].length;&#10;        for (int[] ints : matrix) {&#10;            for (int j = 0; j &lt; m; j++) {&#10;                System.out.print(ints[j] + &quot; &quot;);&#10;            }&#10;            System.out.println();&#10;        }&#10;    }&#10;&#10;    private static int[][] sumMatrix (int[][] matrixA, int[][] matrixB) {&#10;        int n = matrixA.length;&#10;        int m = matrixA[0].length;&#10;&#10;        int[][] result;&#10;&#10;        if (n != matrixB.length &amp;&amp; m != matrixB[0].length) {&#10;            result = null;&#10;        }&#10;        else {&#10;            result = new int[n][m];&#10;            for (int i = 0; i &lt; n; i++) {&#10;                for (int j = 0; j &lt; m; j++) {&#10;                    result[i][j] = matrixA[i][j] + matrixB[i][j];&#10;                }&#10;&#10;            }&#10;        }&#10;&#10;        return result;&#10;    }&#10;&#10;    private static int[][] multiplyOnConstant (int[][] matrix, int constant) {&#10;        int n = matrix.length;&#10;        int m = matrix[0].length;&#10;&#10;        for (int i = 0; i &lt; n; i++) {&#10;            for (int j = 0; j &lt; m; j++) {&#10;                matrix[i][j] *= constant;&#10;            }&#10;        }&#10;        return matrix;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1559846284000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage, you should implement a matrix transposition. Matrix transposition is an operation in linear algebra that exchange matrix rows on matrix columns and returns a new matrix in result. This is an operation just with a single matrix.&lt;/p&gt;&#10;&#10;&lt;p&gt;The main diagonal of the matrix is a line with elements from &lt;span class=&quot;math-tex&quot;&gt;\( A_{(1, 1)} \)&lt;/span&gt; to &lt;span class=&quot;math-tex&quot;&gt;\( A_{(n ,n)} \)&lt;/span&gt;.&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;img alt=&quot;&quot; height=&quot;105&quot; src=&quot;https://lh4.googleusercontent.com/72NynjOhKK3sjGBEVsTIF2PRe_hOZakz8gwFAOKAMVOkl8K4ej_qwNz6Yjg-bOuz-xE2zxN49I-mEM9QtMecV7767Ajq7ewKtcv9M4uf92MqNqKP5P_LeyLTk6sCfXg9_2sowO3A&quot; width=&quot;104&quot;&gt;&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;The side diagonal of the matrix is a line from &lt;span class=&quot;math-tex&quot;&gt;\( A_{(1, n)} \)&lt;/span&gt; to &lt;span class=&quot;math-tex&quot;&gt;\( A_{(n, 1)} \)&lt;/span&gt;.&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;img alt=&quot;&quot; height=&quot;105&quot; src=&quot;https://lh6.googleusercontent.com/aJWT7HuqibMAYuwdkWkABtWb21V7zK1rE0SopFh2O4kwNT1w-AiIAB4oohy3LMrd0rBkVWTuZmgSdAMIcSFOPjgrS7FVth2mJzEwRj4ZcpB83W3KV4Y5hGZQFQMNnMuBU3Biiz1V&quot; width=&quot;104&quot;&gt;&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;There are 4 types of matrix transposition :&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;  &lt;li&gt;&#10;    &lt;p&gt;transposition relatively main diagonal&lt;/p&gt;&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    &lt;p&gt;transposition relatively side diagonal&lt;/p&gt;&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    &lt;p&gt;transposition by vertical line&lt;/p&gt;&#10;  &lt;/li&gt;&#10;  &lt;li&gt;&#10;    &lt;p&gt;transposition by horizontal line&lt;/p&gt;&#10;  &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt;&lt;strong&gt;Transposition relatively main diagonal is shown below. Notice that this transposition is only possible on the square matrix. &lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;img alt=&quot;&quot; height=&quot;116&quot; src=&quot;https://lh6.googleusercontent.com/sxY32ral5r2LD9A1pEWxtmOYrs5W82-3BMJSS62cQOuHn4Oy12Gev-AblzrtaQSi64wBxS30oJDbmx6nAW8vBGrhaatDsqaN6g5j8y5oiLh-OzZ6iP5b2Gb2yY4_ZuljceiM65fo&quot; width=&quot;270&quot;&gt;&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Transposition relatively side diagonal. Â This transposition is also only possible on the square matrix.&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; height=&quot;118&quot; src=&quot;https://lh4.googleusercontent.com/jSgC7fFy8yZHGA1yrZ-P_HhRVg6y2e98Vy9NHsoEuWgzATdoQiHjETMY77t0v-zx3USzxDb6ACv4oxjjBUwcoRxrdIntIHQbMpLdypesie_1Jagz5FC4T8KP8Set6reJVdaEk5aR&quot; width=&quot;262&quot;&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Transposition by vertical line:&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;img alt=&quot;&quot; height=&quot;151&quot; src=&quot;https://lh6.googleusercontent.com/Dxvj8X5bhe5tBUnXOQg2AHBCmCxjbqBRn0-QoCJW4dyHhBDPxz5xhnI6NMuPiwUs0Zetk0F4BrifkGj0adokuOIlD0g1Xz2Rx96JmYAcJCIYnWpQMiu_YFvkdkNdWjArC053AC2X&quot; width=&quot;292&quot;&gt;&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Transposition by horizontal line:&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;img alt=&quot;&quot; height=&quot;135&quot; src=&quot;https://lh5.googleusercontent.com/RrCz8_omciKdctxk2ZdqYfHqhPMkykoNy57hXbHMl-9_VhxeMujIUC1VRqKNF_V66D62O2NhzEXg1YFpupFUhGHFp6gHSHmZBikCn1mrZUvfNEabG4b0nGWOyTNFdLBEob8PxUXj&quot; width=&quot;289&quot;&gt;&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;So, in this stage, you should write a program that can transpose matrices.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Below is an example of how your output might look.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;1. Add matrices&#10;2. Multiply matrix to a constant&#10;3. Multiply matrices&#10;4. Transpose matrix&#10;0. Exit&#10;Your choice: 4&#10;&#10;1. Main diagonal&#10;2. Side diagonal&#10;3. Vertical line&#10;4. Horizontal line&#10;Your chouce: 1&#10;Enter matrix size: 3 3&#10;Enter matrix:&#10;1 7 7&#10;6 6 4&#10;4 2 1&#10;The result is:&#10;1 6 4&#10;7 6 2&#10;7 4 1&#10;&#10;1. Add matrices&#10;2. Multiply matrix to a constant&#10;3. Multiply matrices&#10;4. Transpose matrix&#10;0. Exit&#10;Your choice: 0&#10;&lt;/code&gt;&lt;/pre&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/60/stages/326/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5468" />
                      <option name="index" value="4" />
                      <option name="name" value="Transpose" />
                      <option name="record" value="3" />
                      <option name="status" value="Solved" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="test/NumericMatrixProcessorTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/NumericMatrixProcessorTest.java" />
                                <option name="text" value="import org.hyperskill.hstest.v4.stage.MainMethodTest;&#10;import processor.Main;&#10;&#10;import org.hyperskill.hstest.v4.testcase.CheckResult;&#10;import org.hyperskill.hstest.v4.testcase.TestCase;&#10;&#10;import java.util.*;&#10;import static java.lang.Math.abs;&#10;&#10;&#10;class TestClue {&#10;&#10;    String feedback;&#10;    ArrayList&lt;Double&gt; answers;&#10;&#10;    TestClue(String feedback, Double[] answers) {&#10;        this.feedback = feedback;&#10;        this.answers = new ArrayList&lt;&gt;(Arrays.asList(answers));&#10;    }&#10;}&#10;&#10;public class NumericMatrixProcessorTest extends MainMethodTest&lt;TestClue&gt; {&#10;&#10;    public NumericMatrixProcessorTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;TestClue&gt;&gt; generateTestCases() {&#10;        return List.of(&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices adding algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        7d, 13d, 132d,&#10;                        17d, 23d, 45d,&#10;                        65d, 57d, 78d&#10;                    }))&#10;                .setInput(&#10;                    &quot;1\n&quot;+&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;3 4 55\n&quot; +&#10;                        &quot;4 1 1\n&quot; +&#10;                        &quot;9 0 0\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;4 9 77\n&quot; +&#10;                        &quot;13 22 44\n&quot; +&#10;                        &quot;56 57 78\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices adding algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        43.13d, 911.62d, 1311.8d, 136.53d,&#10;                        -4.2d, 141.1d, -1.09d, 1421.6d,&#10;                        230.33d, 114.2d, 100.7d, 990.4d,&#10;                        956.72d, 168.94d, 112.16d, 27.0d&#10;                    }))&#10;                .setInput(&#10;                    &quot;1\n&quot;+&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;-0.3 677.4 435.2 123.33\n&quot; +&#10;                        &quot;1.3 141.4 0.11 1411.4\n&quot; +&#10;                        &quot;231.33 113.4 99.9 999.9\n&quot; +&#10;                        &quot;1002.22 123.44 55.66 13.3\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;43.43 234.22 876.6 13.2\n&quot; +&#10;                        &quot;-5.5 -0.3 -1.2 10.2\n&quot; +&#10;                        &quot;-1.0 0.8 0.8 -9.5\n&quot; +&#10;                        &quot;-45.5 45.5 56.5 13.7\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if multiplication matrix on constant algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        187d, 3978d, 7548d,&#10;                        7752d, 5831d, 3774d,&#10;                        16949d, 7752d, 7752d&#10;                    }))&#10;                .setInput(&#10;                    &quot;2\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;11 234 444\n&quot; +&#10;                        &quot;456 343 222\n&quot; +&#10;                        &quot;997 456 456\n&quot; +&#10;                        &quot;17\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if multiplication matrix on constant algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        1123653d, 5933505d, 110927295d, 2365632d,&#10;                        1505049d, 8619594d, 25665531d, 3833274d,&#10;                        1366632d, 2598732d ,37999962d, 58303305d,&#10;                        11068143d, 9781653d ,13666653d ,13443321d&#10;                    }))&#10;                .setInput(&#10;                    &quot;2\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;10123 53455 999345 21312\n&quot; +&#10;                        &quot;13559 77654 231221 34534\n&quot; +&#10;                        &quot;12312 23412 342342 525255\n&quot; +&#10;                        &quot;99713 88123 123123 121111\n&quot; +&#10;                        &quot;111\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices multiplication algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        45d, 113d, 11d, 266d,&#10;                        84d, 139d, 29d, 229d,&#10;                        45d, 49d, 35d, 100d,&#10;                        15d, 86d, 0d, 281d ,&#10;                    }))&#10;                .setInput(&#10;                    &quot;3\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;1 2 2 7\n&quot; +&#10;                        &quot;3 3 4 5\n&quot; +&#10;                        &quot;5 0 0 1\n&quot; +&#10;                        &quot;0 1 0 8\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;9 8 7 13\n&quot; +&#10;                        &quot;15 14 0 1\n&quot; +&#10;                        &quot;3 7 2 3\n&quot; +&#10;                        &quot;0 9 0 35\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices multiplication algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        243d, 295d, 78d, 60d,&#10;                        724d, 798d, 2063d, 175d&#10;                    }))&#10;                .setInput(&#10;                    &quot;3\n&quot; +&#10;                        &quot;2 3\n&quot; +&#10;                        &quot;1 0 17\n&quot; +&#10;                        &quot;15 19 7\n&quot; +&#10;                        &quot;3 4\n&quot; +&#10;                        &quot;5 6 78 9\n&quot; +&#10;                        &quot;29 31 47 1\n&quot; +&#10;                        &quot;14 17 0 3\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices multiplication algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        100d, 105d,&#10;                        130d, 43d,&#10;                        48d, 53d&#10;                    }))&#10;                .setInput(&#10;                    &quot;3\n&quot; +&#10;                        &quot;3 5\n&quot; +&#10;                        &quot;1 4 5 6 6\n&quot; +&#10;                        &quot;7 8 9 0 0\n&quot; +&#10;                        &quot;4 1 2 2 2\n&quot; +&#10;                        &quot;5 2\n&quot; +&#10;                        &quot;4 5\n&quot; +&#10;                        &quot;6 1\n&quot; +&#10;                        &quot;6 0\n&quot; +&#10;                        &quot;0 9\n&quot; +&#10;                        &quot;7 7\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices multiplication algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        -3728.685d, 3752.621d, 4367.396d, 1074.785d,&#10;                        246.11d, -228.39d, -396.2d, 29.71d,&#10;                        73.32d, -67.679d, -87.43, 25.04d,&#10;                        -39.22d, 42.02d, 55.6d, -119.42d&#10;                    }))&#10;                .setInput(&#10;                    &quot;3\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;0.65 0.67 76.4 23.2\n&quot; +&#10;                        &quot;-0.7 -13.1 -7.2 9.2\n&quot; +&#10;                        &quot;-0.7 -5.5 -1.5 0.4\n&quot; +&#10;                        &quot;-1.0 12.6 0.8 -0.4\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;-5.5 -0.3 -1.2 10.2\n&quot; +&#10;                        &quot;-1.0 0.8 0.8 -9.5\n&quot; +&#10;                        &quot;-45.5 45.5 56.5 13.7\n&quot; +&#10;                        &quot;-10.7 11.9 2.2 1.2\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if you can do more than one operation in a loop&quot;,&#10;                    new Double[]{&#10;                        -3728.685d, 3752.621d, 4367.396d, 1074.785d,&#10;                        246.11d, -228.39d, -396.2d, 29.71d,&#10;                        73.32d, -67.679d, -87.43, 25.04d,&#10;                        -39.22d, 42.02d, 55.6d, -119.42d,&#10;                        100d, 105d,&#10;                        130d, 43d,&#10;                        48d, 53d&#10;                    }))&#10;                .setInput(&#10;                    &quot;3\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;0.65 0.67 76.4 23.2\n&quot; +&#10;                        &quot;-0.7 -13.1 -7.2 9.2\n&quot; +&#10;                        &quot;-0.7 -5.5 -1.5 0.4\n&quot; +&#10;                        &quot;-1.0 12.6 0.8 -0.4\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;-5.5 -0.3 -1.2 10.2\n&quot; +&#10;                        &quot;-1.0 0.8 0.8 -9.5\n&quot; +&#10;                        &quot;-45.5 45.5 56.5 13.7\n&quot; +&#10;                        &quot;-10.7 11.9 2.2 1.2\n&quot; +&#10;                        &quot;3\n&quot; +&#10;                        &quot;3 5\n&quot; +&#10;                        &quot;1 4 5 6 6\n&quot; +&#10;                        &quot;7 8 9 0 0\n&quot; +&#10;                        &quot;4 1 2 2 2\n&quot; +&#10;                        &quot;5 2\n&quot; +&#10;                        &quot;4 5\n&quot; +&#10;                        &quot;6 1\n&quot; +&#10;                        &quot;6 0\n&quot; +&#10;                        &quot;0 9\n&quot; +&#10;                        &quot;7 7\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if diagonal transposition algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        1d, 6d, 4d,&#10;                        7d, 6d, 2d,&#10;                        7d, 4d, 1d,&#10;                    }))&#10;                .setInput(&#10;                    &quot;4\n&quot; +&#10;                        &quot;1\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;1 7 7\n&quot; +&#10;                        &quot;6 6 4\n&quot; +&#10;                        &quot;4 2 1\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if diagonal transposition algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        1d, 6d, 4d,&#10;                        7d, 6d, 5d,&#10;                        7d, 4d, 1d,&#10;                    }))&#10;                .setInput(&#10;                    &quot;4\n&quot; +&#10;                        &quot;1\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;1 7 7\n&quot; +&#10;                        &quot;6 6 4\n&quot; +&#10;                        &quot;4 5 1\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if diagonal transposition algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        1d, 6d, 4d,&#10;                        7d, 6d, 2d,&#10;                        7d, 4d, 1d,&#10;                    }))&#10;                .setInput(&#10;                    &quot;4\n&quot; +&#10;                        &quot;2\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;1 2 4\n&quot; +&#10;                        &quot;4 6 6\n&quot; +&#10;                        &quot;7 7 1\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if diagonal transposition algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        1d, 6d, 4d,&#10;                        7d, 6d, 5d,&#10;                        7d, 4d, 1d,&#10;                    }))&#10;                .setInput(&#10;                    &quot;4\n&quot; +&#10;                        &quot;2\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;1 5 4\n&quot; +&#10;                        &quot;4 6 6\n&quot; +&#10;                        &quot;7 7 1.0\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if transposition algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        2d, 4d, 5d, 6d,&#10;                        6d, 6d, 7d, 8d,&#10;                        5d, 0d, 0d, 1d,&#10;                        8d, 8d, 2d, 9d&#10;                    }))&#10;                .setInput(&#10;                    &quot;4\n&quot; +&#10;                        &quot;3\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;6 5 4 2\n&quot; +&#10;                        &quot;8 7 6 6\n&quot; +&#10;                        &quot;1 0 0 5.0\n&quot; +&#10;                        &quot;9 2 8 8\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if transposition algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        2d, 4d, 5d, 6d,&#10;                        6d, 6d, 7d, 8d,&#10;                        5d, 0d, 0d, 1d,&#10;                        8d, 8d, 2d, 9d&#10;                    }))&#10;                .setInput(&#10;                    &quot;4\n&quot; +&#10;                        &quot;4\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;8 8 2 9\n&quot; +&#10;                        &quot;5 0 0 1\n&quot; +&#10;                        &quot;6 6 7 8.0\n&quot; +&#10;                        &quot;2 4 5 6\n&quot; +&#10;                        &quot;0&quot;)&#10;        );&#10;    }&#10;&#10;&#10;    @Override&#10;    public CheckResult check(String reply, TestClue clue) {&#10;&#10;        try {&#10;&#10;            String[] strNumbers = reply.lines()&#10;                .filter(line -&gt; {&#10;                    line = line.strip();&#10;                    if (line.length() == 0) {&#10;                        return false;&#10;                    }&#10;                    for (char c : line.toCharArray()) {&#10;                        if (!(c == ' ' ||&#10;                            c &gt;= '0' &amp;&amp; c &lt;= '9' ||&#10;                            c == '.' ||&#10;                            c == '-' || c == '+' ||&#10;                            c == 'e' || c == 'E')) {&#10;                            return false;&#10;                        }&#10;                    }&#10;                    return true;&#10;                }).reduce(&quot;&quot;, (a, b) -&gt; a + &quot; &quot; + b)&#10;                .strip().split(&quot;\\s+&quot;);&#10;&#10;            double[] actual = Arrays.stream(strNumbers).mapToDouble(Double::parseDouble).toArray();&#10;&#10;            double[] expected =&#10;                clue.answers.stream()&#10;                    .mapToDouble(e -&gt; e)&#10;                    .toArray();&#10;            if (actual.length != expected.length) {&#10;                return new CheckResult(false, clue.feedback);&#10;            }&#10;&#10;            for (int i = 0; i &lt; actual.length; i++) {&#10;                if (abs(actual[i] - expected[i]) &gt; 0.01) {&#10;                    return new CheckResult(false, clue.feedback);&#10;                }&#10;            }&#10;        }&#10;        catch (Exception ex) {&#10;            return new CheckResult(false, &quot;Can't check the answer&quot;);&#10;        }&#10;&#10;        return CheckResult.TRUE;&#10;&#10;    }&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/processor/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/processor/Main.java" />
                                <option name="text" value="package processor;&#10;&#10;import java.util.Scanner;&#10;&#10;public class Main {&#10;    private static Scanner scanner = new Scanner(System.in);&#10;    public static void main(String[] args) {&#10;        showMainMenu();&#10;&#10;    }&#10;&#10;    private static void showMainMenu() {&#10;        System.out.println(&quot;1. Add matrices\n&quot; +&#10;                &quot;2. Multiply matrix to a constant\n&quot; +&#10;                &quot;3. Multiply matrices\n&quot; +&#10;                &quot;0. Exit\n&quot;);&#10;        System.out.print(&quot;Your choice: &quot;);&#10;        int choice = scanner.nextInt();&#10;&#10;        switch (choice) {&#10;            case 1:&#10;                addMatricesMenu();&#10;                break;&#10;            case 2:&#10;                multiplyMarixOnConstantMenu();&#10;                break;&#10;            case 3:&#10;                multiplyMatricesMenu();&#10;                break;&#10;            case 0:&#10;                return;&#10;            default:&#10;                showMainMenu();&#10;                break;&#10;        }&#10;    }&#10;&#10;    private static void addMatricesMenu() {&#10;        System.out.print(&quot;Enter size of first matrix: &quot;);&#10;        int n = scanner.nextInt();&#10;        int m = scanner.nextInt();&#10;        double[][] matrixA = fillMatrix(n, m);&#10;&#10;        System.out.print(&quot;Enter size of second matrix: &quot;);&#10;        n = scanner.nextInt();&#10;        m = scanner.nextInt();&#10;        double[][] matrixB = fillMatrix(n, m);&#10;&#10;        System.out.println(&quot;Adding result is:&quot;);&#10;        printMatrix(addMatrices(matrixA, matrixB));&#10;&#10;        showMainMenu();&#10;    }&#10;&#10;    private static void multiplyMarixOnConstantMenu() {&#10;        System.out.print(&quot;Enter size of the matrix: &quot;);&#10;        int n = scanner.nextInt();&#10;        int m = scanner.nextInt();&#10;        double[][] matrix = fillMatrix(n, m);&#10;&#10;        System.out.print(&quot;Enter the constant: &quot;);&#10;        double c = scanner.nextInt();&#10;&#10;        System.out.println(&quot;Multiplying on constant result is: &quot;);&#10;        printMatrix(multiplyOnConstant(matrix, c));&#10;&#10;        showMainMenu();&#10;    }&#10;&#10;        private static void multiplyMatricesMenu() {&#10;        System.out.print(&quot;Enter size of first matrix: &quot;);&#10;        int n = scanner.nextInt();&#10;        int m = scanner.nextInt();&#10;&#10;        System.out.println(&quot;Enter first matrix:&quot;);&#10;        double[][] matrixA = fillMatrix(n, m);&#10;&#10;        System.out.print(&quot;Enter size of second matrix: &quot;);&#10;        n = scanner.nextInt();&#10;        m = scanner.nextInt();&#10;&#10;        System.out.println(&quot;Enter second matrix:&quot;);&#10;        double[][] matrixB = fillMatrix(n, m);&#10;&#10;        System.out.println(&quot;The multiplication result is:&quot;);&#10;        printMatrix(multiplyMatrices(matrixA, matrixB));&#10;&#10;        showMainMenu();&#10;    }&#10;&#10;    private static double[][] multiplyMatrices(double[][] matrixA, double[][] matrixB) {&#10;        double[][] result = null;&#10;        int nA = matrixA.length;&#10;        int mA = matrixA[0].length;&#10;        int nB = matrixB.length;&#10;        int mB = matrixB[0].length;&#10;&#10;        // check if matrices can be multiplied&#10;        if (mA == nB) {&#10;            result = new double[nA][mB];&#10;            double temp = 0;&#10;&#10;            for (int i = 0; i &lt; nA; i++) {&#10;                for (int j = 0; j &lt; mB; j++) {&#10;                    for (int k = 0; k &lt; nB; k++) {&#10;                        temp += matrixA[i][k] * matrixB[k][j];&#10;                    }&#10;                    result[i][j] = temp;&#10;                    temp = 0;&#10;                }&#10;            }&#10;        }&#10;        return result;&#10;    }&#10;&#10;    private static double[][] fillMatrix(int n, int m) {&#10;        double[][] matrix = new double[n][m];&#10;        for (int i = 0; i &lt; n; i++) {&#10;            for (int j = 0; j &lt; m; j++) {&#10;                matrix[i][j] = scanner.nextDouble();&#10;            }&#10;        }&#10;        return matrix;&#10;    }&#10;&#10;    private static void printMatrix(double[][] matrix) {&#10;        int n = matrix[0].length;&#10;        for (double[] ints : matrix) {&#10;            for (int j = 0; j &lt; n; j++) {&#10;                System.out.print(ints[j] + &quot; &quot;);&#10;            }&#10;            System.out.println();&#10;        }&#10;        System.out.println();&#10;    }&#10;&#10;    private static double[][] addMatrices (double[][] matrixA, double[][] matrixB) {&#10;        int n = matrixA.length;&#10;        int m = matrixA[0].length;&#10;&#10;        double[][] result;&#10;&#10;        if (n != matrixB.length &amp;&amp; m != matrixB[0].length) {&#10;            result = null;&#10;        }&#10;        else {&#10;            result = new double[n][m];&#10;            for (int i = 0; i &lt; n; i++) {&#10;                for (int j = 0; j &lt; m; j++) {&#10;                    result[i][j] = matrixA[i][j] + matrixB[i][j];&#10;                }&#10;            }&#10;        }&#10;&#10;        return result;&#10;    }&#10;&#10;    private static double[][] multiplyOnConstant (double[][] matrix, double constant) {&#10;        int n = matrix.length;&#10;        int m = matrix[0].length;&#10;&#10;        for (int i = 0; i &lt; n; i++) {&#10;            for (int j = 0; j &lt; m; j++) {&#10;                matrix[i][j] *= constant;&#10;            }&#10;        }&#10;        return matrix;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1559846284000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage you should write a program that calculates a determinant of a matrix. You can watch the first 6 videos about linear algebraÂ from &lt;a href=&quot;https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;this&lt;/a&gt;Â playlistÂ to understand the essence of the determinant and why it so important. To understand how to actually calculate the determinant of any square matrix, you can watch &lt;a href=&quot;https://www.youtube.com/watch?v=KMKd993vG9Q&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;this&lt;/a&gt;Â video and &lt;a href=&quot;https://www.youtube.com/watch?v=H9BWRYJNIv4&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;this&lt;/a&gt; videos.&lt;/p&gt;&#10;&#10;&lt;p&gt;A determinant is a single number that can be computed from elements of a square matrix. There is a classical way to find the determinant of a matrix with order &amp;lt; 3.&lt;/p&gt;&#10;&#10;&lt;p&gt;A determinant of a 2-order matrix is equal to the difference between multiplication elements on the main diagonal and elements on the side diagonal.&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;img alt=&quot;&quot; src=&quot;https://lh4.googleusercontent.com/a_uW0XW-ZZdV-LgNRzyfmFNvXDf7_EIjNK8dXZETnncTUmDv8a2q_NBP5pTiqr0GP6YJ_cc6x8Odxckry7H7yseqN3LJdriFYwUFFGo1pB1nBHEk5Wo5yEfmLaCkmrJXrI3iRzYD&quot;&gt;&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Letâ€™s understand what theÂ minor and cofactor of a matrix are.&lt;br&gt;&#10;  &lt;br&gt;&#10;  &lt;span class=&quot;math-tex&quot;&gt;\( Minor_{(i, j)} \)&lt;/span&gt; of a matrix is the determinant of the submatrix we can get from the elements remaining after removing i row and j column from this matrix.&lt;/p&gt;&#10;&#10;&lt;p&gt;Below is an example of &lt;span class=&quot;math-tex&quot;&gt;\( Minor_{(2, 2)} \)&lt;/span&gt; for matrix &lt;span class=&quot;math-tex&quot;&gt;\( A_{3 \times 3} \)&lt;/span&gt;:&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;img alt=&quot;&quot; src=&quot;https://lh4.googleusercontent.com/f07WEcndu4jw13WfbVqCSYq0TEHydxdaDxwahrscJ5Ex0_bdu2eWecRk7Q1u2h-u5D9P9Woz1s8iY3ERg20icXs7VwF_-jMNvEFlGl9HHP3OWxIsF3_UvkLkcKOcabnINeMeVUBv&quot;&gt;&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;span class=&quot;math-tex&quot;&gt;\( Cofactor_{(i, j)} \)&lt;/span&gt; of matrix is the corresponding &lt;span class=&quot;math-tex&quot;&gt;\( Minor_{(i, j)} \)&lt;/span&gt; multiplied by &lt;span class=&quot;math-tex&quot;&gt;\( (-1)^{i+j} \)&lt;/span&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;We often need to find the determinant of a matrix of more than order 2. In this case we have to use expansion by rows or columns where the determinant is equal to a sum of a single row or a single column multiplied by the cofactors of the elements in the corresponding row or column. To do this, you should use a recursive method.&lt;/p&gt;&#10;&#10;&lt;p&gt;Below is an example of computing the determinant of a matrix of order 4Â by first-row expansion, where &lt;span class=&quot;math-tex&quot;&gt;\( C \)&lt;/span&gt; stands for the &lt;span class=&quot;math-tex&quot;&gt;\( Cofactor \)&lt;/span&gt; .&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;img alt=&quot;&quot; src=&quot;https://lh5.googleusercontent.com/PUELG8KgY2_yH4eQWvoWFPFTx3_dd4jjYFicvLUpSgZpXQIx6QlFnjRWPJ_-ah3n6UsfuREk1OjBer-BW8pasGkL5HMgfmyGzwC669DOt93FPaBLtuq-H_oRQ06w0-EYrliJ6GtA&quot;&gt;&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Below is an example of how your output might look.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;1. Add matrices&#10;2. Multiply matrix to a constant&#10;3. Multiply matrices&#10;4. Transpose matrix&#10;5. Calculate a determinant&#10;0. Exit&#10;Your choice: 5&#10;Enter matrix size: 3 3&#10;Enter matrix:&#10;1 7 7&#10;6 6 4&#10;4 2 1&#10;The result is:&#10;-16&#10;&#10;1. Add matrices&#10;2. Multiply matrix to a constant&#10;3. Multiply matrices&#10;4. Transpose matrix&#10;5. Calculate a determinant&#10;0. Exit&#10;Your choice: 5&#10;Enter matrix size: 5 5&#10;Enter matrix:&#10;1 2 3 4 5&#10;4 5 6 4 3&#10;0 0 0 1 5&#10;1 3 9 8 7&#10;5 8 4 7 11&#10;The determinant is:&#10;191&#10;&#10;1. Add matrices&#10;2. Multiply matrix to a constant&#10;3. Multiply matrices&#10;4. Transpose matrix&#10;5. Calculate a determinant&#10;0. Exit&#10;Your choice: 0&#10;&lt;/code&gt;&lt;/pre&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/60/stages/327/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5469" />
                      <option name="index" value="5" />
                      <option name="name" value="Determined!" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="files">
                        <map>
                          <entry key="test/NumericMatrixProcessorTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/NumericMatrixProcessorTest.java" />
                                <option name="text" value="import org.hyperskill.hstest.v4.stage.MainMethodTest;&#10;import processor.Main;&#10;&#10;import org.hyperskill.hstest.v4.testcase.CheckResult;&#10;import org.hyperskill.hstest.v4.testcase.TestCase;&#10;&#10;import java.util.ArrayList;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;&#10;import static java.lang.Math.abs;&#10;&#10;&#10;class TestClue {&#10;&#10;    String feedback;&#10;    ArrayList&lt;Double&gt; answers;&#10;&#10;    TestClue(String feedback, Double[] answers) {&#10;        this.feedback = feedback;&#10;        this.answers = new ArrayList&lt;&gt;(Arrays.asList(answers));&#10;    }&#10;}&#10;&#10;public class NumericMatrixProcessorTest extends MainMethodTest&lt;TestClue&gt; {&#10;&#10;    public NumericMatrixProcessorTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;TestClue&gt;&gt; generateTestCases() {&#10;        return List.of(&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices adding algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        7d, 13d, 132d,&#10;                        17d, 23d, 45d,&#10;                        65d, 57d, 78d&#10;                    }))&#10;                .setInput(&#10;                    &quot;1\n&quot;+&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;3 4 55\n&quot; +&#10;                        &quot;4 1 1\n&quot; +&#10;                        &quot;9 0 0\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;4 9 77\n&quot; +&#10;                        &quot;13 22 44\n&quot; +&#10;                        &quot;56 57 78\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices adding algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        43.13d, 911.62d, 1311.8d, 136.53d,&#10;                        -4.2d, 141.1d, -1.09d, 1421.6d,&#10;                        230.33d, 114.2d, 100.7d, 990.4d,&#10;                        956.72d, 168.94d, 112.16d, 27.0d&#10;                    }))&#10;                .setInput(&#10;                    &quot;1\n&quot;+&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;-0.3 677.4 435.2 123.33\n&quot; +&#10;                        &quot;1.3 141.4 0.11 1411.4\n&quot; +&#10;                        &quot;231.33 113.4 99.9 999.9\n&quot; +&#10;                        &quot;1002.22 123.44 55.66 13.3\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;43.43 234.22 876.6 13.2\n&quot; +&#10;                        &quot;-5.5 -0.3 -1.2 10.2\n&quot; +&#10;                        &quot;-1.0 0.8 0.8 -9.5\n&quot; +&#10;                        &quot;-45.5 45.5 56.5 13.7\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if multiplication matrix on constant algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        187d, 3978d, 7548d,&#10;                        7752d, 5831d, 3774d,&#10;                        16949d, 7752d, 7752d&#10;                    }))&#10;                .setInput(&#10;                    &quot;2\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;11 234 444\n&quot; +&#10;                        &quot;456 343 222\n&quot; +&#10;                        &quot;997 456 456\n&quot; +&#10;                        &quot;17\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if multiplication matrix on constant algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        1123653d, 5933505d, 110927295d, 2365632d,&#10;                        1505049d, 8619594d, 25665531d, 3833274d,&#10;                        1366632d, 2598732d ,37999962d, 58303305d,&#10;                        11068143d, 9781653d ,13666653d ,13443321d&#10;                    }))&#10;                .setInput(&#10;                    &quot;2\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;10123 53455 999345 21312\n&quot; +&#10;                        &quot;13559 77654 231221 34534\n&quot; +&#10;                        &quot;12312 23412 342342 525255\n&quot; +&#10;                        &quot;99713 88123 123123 121111\n&quot; +&#10;                        &quot;111\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices multiplication algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        45d, 113d, 11d, 266d,&#10;                        84d, 139d, 29d, 229d,&#10;                        45d, 49d, 35d, 100d,&#10;                        15d, 86d, 0d, 281d ,&#10;                    }))&#10;                .setInput(&#10;                    &quot;3\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;1 2 2 7\n&quot; +&#10;                        &quot;3 3 4 5\n&quot; +&#10;                        &quot;5 0 0 1\n&quot; +&#10;                        &quot;0 1 0 8\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;9 8 7 13\n&quot; +&#10;                        &quot;15 14 0 1\n&quot; +&#10;                        &quot;3 7 2 3\n&quot; +&#10;                        &quot;0 9 0 35\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices multiplication algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        243d, 295d, 78d, 60d,&#10;                        724d, 798d, 2063d, 175d&#10;                    }))&#10;                .setInput(&#10;                    &quot;3\n&quot; +&#10;                        &quot;2 3\n&quot; +&#10;                        &quot;1 0 17\n&quot; +&#10;                        &quot;15 19 7\n&quot; +&#10;                        &quot;3 4\n&quot; +&#10;                        &quot;5 6 78 9\n&quot; +&#10;                        &quot;29 31 47 1\n&quot; +&#10;                        &quot;14 17 0 3\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices multiplication algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        100d, 105d,&#10;                        130d, 43d,&#10;                        48d, 53d&#10;                    }))&#10;                .setInput(&#10;                    &quot;3\n&quot; +&#10;                        &quot;3 5\n&quot; +&#10;                        &quot;1 4 5 6 6\n&quot; +&#10;                        &quot;7 8 9 0 0\n&quot; +&#10;                        &quot;4 1 2 2 2\n&quot; +&#10;                        &quot;5 2\n&quot; +&#10;                        &quot;4 5\n&quot; +&#10;                        &quot;6 1\n&quot; +&#10;                        &quot;6 0\n&quot; +&#10;                        &quot;0 9\n&quot; +&#10;                        &quot;7 7\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices multiplication algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        -3728.685d, 3752.621d, 4367.396d, 1074.785d,&#10;                        246.11d, -228.39d, -396.2d, 29.71d,&#10;                        73.32d, -67.679d, -87.43, 25.04d,&#10;                        -39.22d, 42.02d, 55.6d, -119.42d&#10;                    }))&#10;                .setInput(&#10;                    &quot;3\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;0.65 0.67 76.4 23.2\n&quot; +&#10;                        &quot;-0.7 -13.1 -7.2 9.2\n&quot; +&#10;                        &quot;-0.7 -5.5 -1.5 0.4\n&quot; +&#10;                        &quot;-1.0 12.6 0.8 -0.4\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;-5.5 -0.3 -1.2 10.2\n&quot; +&#10;                        &quot;-1.0 0.8 0.8 -9.5\n&quot; +&#10;                        &quot;-45.5 45.5 56.5 13.7\n&quot; +&#10;                        &quot;-10.7 11.9 2.2 1.2\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if you can do more than one operation in a loop&quot;,&#10;                    new Double[]{&#10;                        -3728.685d, 3752.621d, 4367.396d, 1074.785d,&#10;                        246.11d, -228.39d, -396.2d, 29.71d,&#10;                        73.32d, -67.679d, -87.43, 25.04d,&#10;                        -39.22d, 42.02d, 55.6d, -119.42d,&#10;                        100d, 105d,&#10;                        130d, 43d,&#10;                        48d, 53d&#10;                    }))&#10;                .setInput(&#10;                    &quot;3\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;0.65 0.67 76.4 23.2\n&quot; +&#10;                        &quot;-0.7 -13.1 -7.2 9.2\n&quot; +&#10;                        &quot;-0.7 -5.5 -1.5 0.4\n&quot; +&#10;                        &quot;-1.0 12.6 0.8 -0.4\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;-5.5 -0.3 -1.2 10.2\n&quot; +&#10;                        &quot;-1.0 0.8 0.8 -9.5\n&quot; +&#10;                        &quot;-45.5 45.5 56.5 13.7\n&quot; +&#10;                        &quot;-10.7 11.9 2.2 1.2\n&quot; +&#10;                        &quot;3\n&quot; +&#10;                        &quot;3 5\n&quot; +&#10;                        &quot;1 4 5 6 6\n&quot; +&#10;                        &quot;7 8 9 0 0\n&quot; +&#10;                        &quot;4 1 2 2 2\n&quot; +&#10;                        &quot;5 2\n&quot; +&#10;                        &quot;4 5\n&quot; +&#10;                        &quot;6 1\n&quot; +&#10;                        &quot;6 0\n&quot; +&#10;                        &quot;0 9\n&quot; +&#10;                        &quot;7 7\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if diagonal transposition algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        1d, 6d, 4d,&#10;                        7d, 6d, 2d,&#10;                        7d, 4d, 1d,&#10;                    }))&#10;                .setInput(&#10;                    &quot;4\n&quot; +&#10;                        &quot;1\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;1 7 7\n&quot; +&#10;                        &quot;6 6 4\n&quot; +&#10;                        &quot;4 2 1\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if diagonal transposition algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        1d, 6d, 4d,&#10;                        7d, 6d, 5d,&#10;                        7d, 4d, 1d,&#10;                    }))&#10;                .setInput(&#10;                    &quot;4\n&quot; +&#10;                        &quot;1\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;1 7 7\n&quot; +&#10;                        &quot;6 6 4\n&quot; +&#10;                        &quot;4 5 1\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if diagonal transposition algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        1d, 6d, 4d,&#10;                        7d, 6d, 2d,&#10;                        7d, 4d, 1d,&#10;                    }))&#10;                .setInput(&#10;                    &quot;4\n&quot; +&#10;                        &quot;2\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;1 2 4\n&quot; +&#10;                        &quot;4 6 6\n&quot; +&#10;                        &quot;7 7 1\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if diagonal transposition algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        1d, 6d, 4d,&#10;                        7d, 6d, 5d,&#10;                        7d, 4d, 1d,&#10;                    }))&#10;                .setInput(&#10;                    &quot;4\n&quot; +&#10;                        &quot;2\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;1 5 4\n&quot; +&#10;                        &quot;4 6 6\n&quot; +&#10;                        &quot;7 7 1.0\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if transposition algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        2d, 4d, 5d, 6d,&#10;                        6d, 6d, 7d, 8d,&#10;                        5d, 0d, 0d, 1d,&#10;                        8d, 8d, 2d, 9d&#10;                    }))&#10;                .setInput(&#10;                    &quot;4\n&quot; +&#10;                        &quot;3\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;6 5 4 2\n&quot; +&#10;                        &quot;8 7 6 6\n&quot; +&#10;                        &quot;1 0 0 5.0\n&quot; +&#10;                        &quot;9 2 8 8\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if transposition algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        2d, 4d, 5d, 6d,&#10;                        6d, 6d, 7d, 8d,&#10;                        5d, 0d, 0d, 1d,&#10;                        8d, 8d, 2d, 9d&#10;                    }))&#10;                .setInput(&#10;                    &quot;4\n&quot; +&#10;                        &quot;4\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;8 8 2 9\n&quot; +&#10;                        &quot;5 0 0 1\n&quot; +&#10;                        &quot;6 6 7 8.0\n&quot; +&#10;                        &quot;2 4 5 6\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if determinant algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        31d&#10;                    }))&#10;                .setInput(&#10;                    &quot;5\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;1 2 3\n&quot; +&#10;                        &quot;4 5 7\n&quot; +&#10;                        &quot;10 22 23\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if determinant algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        45.2197d&#10;                    }))&#10;                .setInput(&#10;                    &quot;5\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;2.65 3.54 3.88 8.99\n&quot; +&#10;                        &quot;3.12 5.45 7.77 5.56\n&quot; +&#10;                        &quot;5.31 2.23 2.33 9.81\n&quot; +&#10;                        &quot;1.67 1.67 1.01 9.99\n&quot; +&#10;                        &quot;0&quot;)&#10;        );&#10;    }&#10;&#10;&#10;    @Override&#10;    public CheckResult check(String reply, TestClue clue) {&#10;&#10;        try {&#10;&#10;            String[] strNumbers = reply.lines()&#10;                .filter(line -&gt; {&#10;                    line = line.strip();&#10;                    if (line.length() == 0) {&#10;                        return false;&#10;                    }&#10;                    for (char c : line.toCharArray()) {&#10;                        if (!(c == ' ' ||&#10;                            c &gt;= '0' &amp;&amp; c &lt;= '9' ||&#10;                            c == '.' ||&#10;                            c == '-' || c == '+' ||&#10;                            c == 'e' || c == 'E')) {&#10;                            return false;&#10;                        }&#10;                    }&#10;                    return true;&#10;                }).reduce(&quot;&quot;, (a, b) -&gt; a + &quot; &quot; + b)&#10;                .strip().split(&quot;\\s+&quot;);&#10;&#10;            double[] actual = Arrays.stream(strNumbers).mapToDouble(Double::parseDouble).toArray();&#10;&#10;            double[] expected =&#10;                clue.answers.stream()&#10;                    .mapToDouble(e -&gt; e)&#10;                    .toArray();&#10;            if (actual.length != expected.length) {&#10;                return new CheckResult(false, clue.feedback);&#10;            }&#10;&#10;            for (int i = 0; i &lt; actual.length; i++) {&#10;                if (abs(actual[i] - expected[i]) &gt; 0.01) {&#10;                    return new CheckResult(false, clue.feedback);&#10;                }&#10;            }&#10;        }&#10;        catch (Exception ex) {&#10;            return new CheckResult(false, &quot;Can't check the answer&quot;);&#10;        }&#10;&#10;        return CheckResult.TRUE;&#10;&#10;    }&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/processor/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/processor/Main.java" />
                                <option name="text" value="package processor;&#10;&#10;import java.util.Scanner;&#10;&#10;public class Main {&#10;    private static Scanner scanner = new Scanner(System.in);&#10;    public static void main(String[] args) {&#10;        showMainMenu();&#10;&#10;    }&#10;&#10;    private static void showMainMenu() {&#10;        System.out.println(&quot;1. Add matrices\n&quot; +&#10;                &quot;2. Multiply matrix to a constant\n&quot; +&#10;                &quot;3. Multiply matrices\n&quot; +&#10;                &quot;4. Transpose matrix\n&quot; +&#10;                &quot;0. Exit\n&quot;);&#10;        System.out.print(&quot;Your choice: &quot;);&#10;        int choice = scanner.nextInt();&#10;&#10;        switch (choice) {&#10;            case 1:&#10;                addMatricesMenu();&#10;                break;&#10;            case 2:&#10;                multiplyMarixOnConstantMenu();&#10;                break;&#10;            case 3:&#10;                multiplyMatricesMenu();&#10;                break;&#10;            case 4:&#10;                transposeMatricesMenu();&#10;                break;&#10;            case 0:&#10;                return;&#10;            default:&#10;                showMainMenu();&#10;                break;&#10;        }&#10;    }&#10;&#10;    private static void addMatricesMenu() {&#10;        System.out.print(&quot;Enter size of first matrix: &quot;);&#10;        int n = scanner.nextInt();&#10;        int m = scanner.nextInt();&#10;        double[][] matrixA = fillMatrix(n, m);&#10;&#10;        System.out.print(&quot;Enter size of second matrix: &quot;);&#10;        n = scanner.nextInt();&#10;        m = scanner.nextInt();&#10;        double[][] matrixB = fillMatrix(n, m);&#10;&#10;        System.out.println(&quot;Adding result is:&quot;);&#10;        printMatrix(addMatrices(matrixA, matrixB));&#10;&#10;        showMainMenu();&#10;    }&#10;&#10;    private static void multiplyMarixOnConstantMenu() {&#10;        System.out.print(&quot;Enter size of the matrix: &quot;);&#10;        int n = scanner.nextInt();&#10;        int m = scanner.nextInt();&#10;        double[][] matrix = fillMatrix(n, m);&#10;&#10;        System.out.print(&quot;Enter the constant: &quot;);&#10;        double c = scanner.nextInt();&#10;&#10;        System.out.println(&quot;Multiplying on constant result is: &quot;);&#10;        printMatrix(multiplyOnConstant(matrix, c));&#10;&#10;        showMainMenu();&#10;    }&#10;&#10;    private static void multiplyMatricesMenu() {&#10;        System.out.print(&quot;Enter size of first matrix: &quot;);&#10;        int n = scanner.nextInt();&#10;        int m = scanner.nextInt();&#10;&#10;        System.out.println(&quot;Enter first matrix:&quot;);&#10;        double[][] matrixA = fillMatrix(n, m);&#10;&#10;        System.out.print(&quot;Enter size of second matrix: &quot;);&#10;        n = scanner.nextInt();&#10;        m = scanner.nextInt();&#10;&#10;        System.out.println(&quot;Enter second matrix:&quot;);&#10;        double[][] matrixB = fillMatrix(n, m);&#10;&#10;        System.out.println(&quot;The multiplication result is:&quot;);&#10;        printMatrix(multiplyMatrices(matrixA, matrixB));&#10;&#10;        showMainMenu();&#10;    }&#10;&#10;    private static void transposeMatricesMenu() {&#10;        System.out.println(&quot;1. Main diagonal\n&quot; +&#10;                &quot;2. Side diagonal\n&quot; +&#10;                &quot;3. Vertical line\n&quot; +&#10;                &quot;4. Horizontal line\n&quot;);&#10;        System.out.print(&quot;Your choice: &quot;);&#10;&#10;        int choice = scanner.nextInt();&#10;&#10;        System.out.print(&quot;Enter matrix size: &quot;);&#10;        int n = scanner.nextInt();&#10;        int m = scanner.nextInt();&#10;&#10;        System.out.println(&quot;Enter matrix:&quot;);&#10;        double[][] matrix = fillMatrix(n, m);&#10;&#10;        transposeMatrix(matrix, choice);&#10;&#10;        showMainMenu();&#10;    }&#10;&#10;    private static double[][] multiplyMatrices(double[][] matrixA, double[][] matrixB) {&#10;        double[][] result = null;&#10;        int nA = matrixA.length;&#10;        int mA = matrixA[0].length;&#10;        int nB = matrixB.length;&#10;        int mB = matrixB[0].length;&#10;&#10;        // check if matrices can be multiplied&#10;        if (mA == nB) {&#10;            result = new double[nA][mB];&#10;            double temp = 0;&#10;&#10;            for (int i = 0; i &lt; nA; i++) {&#10;                for (int j = 0; j &lt; mB; j++) {&#10;                    for (int k = 0; k &lt; nB; k++) {&#10;                        temp += matrixA[i][k] * matrixB[k][j];&#10;                    }&#10;                    result[i][j] = temp;&#10;                    temp = 0;&#10;                }&#10;            }&#10;        }&#10;        return result;&#10;    }&#10;&#10;    private static double[][] fillMatrix(int n, int m) {&#10;        double[][] matrix = new double[n][m];&#10;        for (int i = 0; i &lt; n; i++) {&#10;            for (int j = 0; j &lt; m; j++) {&#10;                matrix[i][j] = scanner.nextDouble();&#10;            }&#10;        }&#10;        return matrix;&#10;    }&#10;&#10;    private static void printMatrix(double[][] matrix) {&#10;        int n = matrix[0].length;&#10;        for (double[] ints : matrix) {&#10;            for (int j = 0; j &lt; n; j++) {&#10;                System.out.print(ints[j] + &quot; &quot;);&#10;            }&#10;            System.out.println();&#10;        }&#10;        System.out.println();&#10;    }&#10;&#10;    private static double[][] addMatrices (double[][] matrixA, double[][] matrixB) {&#10;        int n = matrixA.length;&#10;        int m = matrixA[0].length;&#10;&#10;        double[][] result;&#10;&#10;        if (n != matrixB.length &amp;&amp; m != matrixB[0].length) {&#10;            result = null;&#10;        }&#10;        else {&#10;            result = new double[n][m];&#10;            for (int i = 0; i &lt; n; i++) {&#10;                for (int j = 0; j &lt; m; j++) {&#10;                    result[i][j] = matrixA[i][j] + matrixB[i][j];&#10;                }&#10;            }&#10;        }&#10;&#10;        return result;&#10;    }&#10;&#10;    private static double[][] multiplyOnConstant (double[][] matrix, double constant) {&#10;        int n = matrix.length;&#10;        int m = matrix[0].length;&#10;&#10;        for (int i = 0; i &lt; n; i++) {&#10;            for (int j = 0; j &lt; m; j++) {&#10;                matrix[i][j] *= constant;&#10;            }&#10;        }&#10;&#10;        return matrix;&#10;    }&#10;&#10;    private static void transposeMatrix (double[][] matrix, int choice) {&#10;        int m = matrix.length;&#10;        int n = matrix[0].length;&#10;        double[][] result = null;&#10;&#10;        switch (choice) {&#10;            case 1:&#10;                if (m == n) {&#10;                    result = transposeMatrixMainDiagonal(matrix);&#10;                } else {&#10;                    result = null;&#10;                }&#10;                break;&#10;            case 2:&#10;                if (m == n) {&#10;                    result = transposeMatrixSideDiagonal(matrix);&#10;                } else {&#10;                    result = null;&#10;                }&#10;                break;&#10;            case 3:&#10;                result = transposeMatrixVerticalLine(matrix);&#10;                break;&#10;            case 4:&#10;                result = transposeMatrixHorizontalLine(matrix);&#10;                break;&#10;            default:&#10;                break;&#10;        }&#10;&#10;        if (result == null) {&#10;            System.out.println(&quot;Operation not supported&quot;);&#10;        }&#10;        else {&#10;            printMatrix(result);&#10;        }&#10;    }&#10;&#10;    private static double[][] transposeMatrixMainDiagonal (double[][] matrix) {&#10;        int n = matrix.length;&#10;        double[][] result = new double[n][n];&#10;&#10;        for (int i = 0; i &lt; n; i++) {&#10;            for (int j = 0; j &lt; n; j++) {&#10;                result[i][j] = matrix[j][i];&#10;            }&#10;        }&#10;&#10;        return result;&#10;    }&#10;&#10;    private static double[][] transposeMatrixSideDiagonal (double[][] matrix) {&#10;        int n = matrix.length;&#10;        double[][] result = new double[n][n];&#10;&#10;        for (int i = 0; i &lt; n; i++) {&#10;            for (int j = 0; j &lt; n; j++) {&#10;                result[i][j] = matrix[n - j - 1][n - i - 1];&#10;            }&#10;        }&#10;&#10;        return result;&#10;    }&#10;&#10;    private static double[][] transposeMatrixVerticalLine (double[][] matrix) {&#10;        int n = matrix.length;&#10;        int m = matrix[0].length;&#10;        double[][] result = new double[n][m];&#10;&#10;        for (int i = 0; i &lt; n; i++) {&#10;            for (int j = 0; j &lt; m; j++) {&#10;                result[i][j] = matrix[i][m - j - 1];&#10;            }&#10;        }&#10;&#10;        return result;&#10;    }&#10;&#10;    private static double[][] transposeMatrixHorizontalLine (double[][] matrix) {&#10;        int n = matrix.length;&#10;        int m = matrix[0].length;&#10;        double[][] result = new double[n][m];&#10;&#10;        for (int i = 0; i &lt; n; i++) {&#10;            result[i] = matrix[n - i - 1];&#10;        }&#10;&#10;        return result;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1559846285000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2 style=&quot;text-align: center;&quot;&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this stage, you should find an inverse of a matrix. You need to use the knowledge youâ€™ve got in the previous stages. Inverse matrix &lt;span class=&quot;math-tex&quot;&gt;\( A^{âˆ’1} \)&lt;/span&gt; is the matrix, the product of which to original matrix A is equal to the identity matrix. To get the idea about inverse matrices you can watch &lt;a href=&quot;https://www.youtube.com/watch?v=AMLUikdDQGk&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;this&lt;/a&gt; video.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;span class=&quot;math-tex&quot;&gt;\( A * A^{-1} = A^{-1} * A = I \)&lt;/span&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;The identity matrix is the matrix in which all elements of the main diagonal are ones and other are zeros. Example of 4x4 identity matrix:&lt;/p&gt;&#10;&#10;&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;img alt=&quot;&quot; height=&quot;100&quot; src=&quot;https://lh4.googleusercontent.com/LGw1Q1HXSlSJ8zxOY4pomKfNRtoOdmFGCoJV1b0Jorw8QhrytdwAd7ZXcn7wM6K31ot-me3d7_h6_DkoalDaj6hdg6KiaVXMvQssMa_NNs3aIQIYelYR9QqPDkNdFnWs06NTp-3g&quot; width=&quot;135&quot;&gt;&lt;/strong&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;Inverse of a matrix can be found using this formula:&lt;br&gt;&#10;    Â  Â  Â  Â &lt;br&gt;&#10;    &lt;span class=&quot;math-tex&quot;&gt;\( A^{-1} = \dfrac{1}{det(A)} * C^T \)&lt;/span&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;As you can see it contains a lot of operations you implemented in the previous stages. It is: finding cofactors of all the elements of the matrix, transposition of the matrix, finding the determinant of a matrix, multiplication of a matrix by a constant.&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;span class=&quot;math-tex&quot;&gt;\( det(A) \)&lt;/span&gt; is determinant of matrix &lt;span class=&quot;math-tex&quot;&gt;\( A \)&lt;/span&gt; and &lt;span class=&quot;math-tex&quot;&gt;\( C^T \)&lt;/span&gt; is the matrix consist of cofactors of all elements of the matrix &lt;span class=&quot;math-tex&quot;&gt;\( A \)&lt;/span&gt; transposed relatively main diagonal. Inverse matrix canâ€™t be found if &lt;span class=&quot;math-tex&quot;&gt;\( det(A) \)&lt;/span&gt; equals zero. You can look at the calculation example in &lt;a href=&quot;https://www.youtube.com/watch?v=xfhzwNkMNg4&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;this&lt;/a&gt; video.&lt;/p&gt;&#10;&#10;&lt;p&gt;Also, you can implement a method that can print a matrix in a readable way - every column would be correctly aligned. And you can round the results by two or more digits.&lt;/p&gt;&#10;&#10;&lt;h2 style=&quot;text-align: center;&quot;&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;p&gt;Below is an example of how your output might look.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;1. Add matrices&#10;2. Multiply matrix to a constant&#10;3. Multiply matrices&#10;4. Transpose matrix&#10;5. Calculate a determinant&#10;6. Inverse matrix&#10;0. Exit&#10;Your choice: 6&#10;Enter matrix size: 3 3&#10;Enter matrix:&#10;2 -1 0&#10;0 1 2&#10;1 1 0&#10;The result is:&#10; 0.33   0  0.33&#10;-0.33   0  0.66&#10; 0.16 0.5 -0.33&#10;&#10;1. Add matrices&#10;2. Multiply matrix to a constant&#10;3. Multiply matrices&#10;4. Transpose matrix&#10;5. Calculate a determinant&#10;6. Inverse matrix&#10;0. Exit&#10;Your choice: 0&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Â &lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/60/stages/328/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5470" />
                      <option name="index" value="6" />
                      <option name="name" value="Inverse matrix" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="files">
                        <map>
                          <entry key="test/NumericMatrixProcessorTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/NumericMatrixProcessorTest.java" />
                                <option name="text" value="import org.hyperskill.hstest.v4.stage.MainMethodTest;&#10;import processor.Main;&#10;&#10;import org.hyperskill.hstest.v4.testcase.CheckResult;&#10;import org.hyperskill.hstest.v4.testcase.TestCase;&#10;&#10;import java.util.ArrayList;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;&#10;import static java.lang.Math.abs;&#10;&#10;&#10;class TestClue {&#10;&#10;    String feedback;&#10;    ArrayList&lt;Double&gt; answers;&#10;&#10;    TestClue(String feedback, Double[] answers) {&#10;        this.feedback = feedback;&#10;        this.answers = new ArrayList&lt;&gt;(Arrays.asList(answers));&#10;    }&#10;}&#10;&#10;public class NumericMatrixProcessorTest extends MainMethodTest&lt;TestClue&gt; {&#10;&#10;    public NumericMatrixProcessorTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;TestClue&gt;&gt; generateTestCases() {&#10;        return List.of(&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices adding algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        7d, 13d, 132d,&#10;                        17d, 23d, 45d,&#10;                        65d, 57d, 78d&#10;                    }))&#10;                .setInput(&#10;                    &quot;1\n&quot;+&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;3 4 55\n&quot; +&#10;                        &quot;4 1 1\n&quot; +&#10;                        &quot;9 0 0\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;4 9 77\n&quot; +&#10;                        &quot;13 22 44\n&quot; +&#10;                        &quot;56 57 78\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices adding algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        43.13d, 911.62d, 1311.8d, 136.53d,&#10;                        -4.2d, 141.1d, -1.09d, 1421.6d,&#10;                        230.33d, 114.2d, 100.7d, 990.4d,&#10;                        956.72d, 168.94d, 112.16d, 27.0d&#10;                    }))&#10;                .setInput(&#10;                    &quot;1\n&quot;+&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;-0.3 677.4 435.2 123.33\n&quot; +&#10;                        &quot;1.3 141.4 0.11 1411.4\n&quot; +&#10;                        &quot;231.33 113.4 99.9 999.9\n&quot; +&#10;                        &quot;1002.22 123.44 55.66 13.3\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;43.43 234.22 876.6 13.2\n&quot; +&#10;                        &quot;-5.5 -0.3 -1.2 10.2\n&quot; +&#10;                        &quot;-1.0 0.8 0.8 -9.5\n&quot; +&#10;                        &quot;-45.5 45.5 56.5 13.7\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if multiplication matrix on constant algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        187d, 3978d, 7548d,&#10;                        7752d, 5831d, 3774d,&#10;                        16949d, 7752d, 7752d&#10;                    }))&#10;                .setInput(&#10;                    &quot;2\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;11 234 444\n&quot; +&#10;                        &quot;456 343 222\n&quot; +&#10;                        &quot;997 456 456\n&quot; +&#10;                        &quot;17\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if multiplication matrix on constant algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        1123653d, 5933505d, 110927295d, 2365632d,&#10;                        1505049d, 8619594d, 25665531d, 3833274d,&#10;                        1366632d, 2598732d ,37999962d, 58303305d,&#10;                        11068143d, 9781653d ,13666653d ,13443321d&#10;                    }))&#10;                .setInput(&#10;                    &quot;2\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;10123 53455 999345 21312\n&quot; +&#10;                        &quot;13559 77654 231221 34534\n&quot; +&#10;                        &quot;12312 23412 342342 525255\n&quot; +&#10;                        &quot;99713 88123 123123 121111\n&quot; +&#10;                        &quot;111\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices multiplication algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        45d, 113d, 11d, 266d,&#10;                        84d, 139d, 29d, 229d,&#10;                        45d, 49d, 35d, 100d,&#10;                        15d, 86d, 0d, 281d ,&#10;                    }))&#10;                .setInput(&#10;                    &quot;3\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;1 2 2 7\n&quot; +&#10;                        &quot;3 3 4 5\n&quot; +&#10;                        &quot;5 0 0 1\n&quot; +&#10;                        &quot;0 1 0 8\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;9 8 7 13\n&quot; +&#10;                        &quot;15 14 0 1\n&quot; +&#10;                        &quot;3 7 2 3\n&quot; +&#10;                        &quot;0 9 0 35\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices multiplication algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        243d, 295d, 78d, 60d,&#10;                        724d, 798d, 2063d, 175d&#10;                    }))&#10;                .setInput(&#10;                    &quot;3\n&quot; +&#10;                        &quot;2 3\n&quot; +&#10;                        &quot;1 0 17\n&quot; +&#10;                        &quot;15 19 7\n&quot; +&#10;                        &quot;3 4\n&quot; +&#10;                        &quot;5 6 78 9\n&quot; +&#10;                        &quot;29 31 47 1\n&quot; +&#10;                        &quot;14 17 0 3\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices multiplication algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        100d, 105d,&#10;                        130d, 43d,&#10;                        48d, 53d&#10;                    }))&#10;                .setInput(&#10;                    &quot;3\n&quot; +&#10;                        &quot;3 5\n&quot; +&#10;                        &quot;1 4 5 6 6\n&quot; +&#10;                        &quot;7 8 9 0 0\n&quot; +&#10;                        &quot;4 1 2 2 2\n&quot; +&#10;                        &quot;5 2\n&quot; +&#10;                        &quot;4 5\n&quot; +&#10;                        &quot;6 1\n&quot; +&#10;                        &quot;6 0\n&quot; +&#10;                        &quot;0 9\n&quot; +&#10;                        &quot;7 7\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if matrices multiplication algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        -3728.685d, 3752.621d, 4367.396d, 1074.785d,&#10;                        246.11d, -228.39d, -396.2d, 29.71d,&#10;                        73.32d, -67.679d, -87.43, 25.04d,&#10;                        -39.22d, 42.02d, 55.6d, -119.42d&#10;                    }))&#10;                .setInput(&#10;                    &quot;3\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;0.65 0.67 76.4 23.2\n&quot; +&#10;                        &quot;-0.7 -13.1 -7.2 9.2\n&quot; +&#10;                        &quot;-0.7 -5.5 -1.5 0.4\n&quot; +&#10;                        &quot;-1.0 12.6 0.8 -0.4\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;-5.5 -0.3 -1.2 10.2\n&quot; +&#10;                        &quot;-1.0 0.8 0.8 -9.5\n&quot; +&#10;                        &quot;-45.5 45.5 56.5 13.7\n&quot; +&#10;                        &quot;-10.7 11.9 2.2 1.2\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if you can do more than one operation in a loop&quot;,&#10;                    new Double[]{&#10;                        -3728.685d, 3752.621d, 4367.396d, 1074.785d,&#10;                        246.11d, -228.39d, -396.2d, 29.71d,&#10;                        73.32d, -67.679d, -87.43, 25.04d,&#10;                        -39.22d, 42.02d, 55.6d, -119.42d,&#10;                        100d, 105d,&#10;                        130d, 43d,&#10;                        48d, 53d&#10;                    }))&#10;                .setInput(&#10;                    &quot;3\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;0.65 0.67 76.4 23.2\n&quot; +&#10;                        &quot;-0.7 -13.1 -7.2 9.2\n&quot; +&#10;                        &quot;-0.7 -5.5 -1.5 0.4\n&quot; +&#10;                        &quot;-1.0 12.6 0.8 -0.4\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;-5.5 -0.3 -1.2 10.2\n&quot; +&#10;                        &quot;-1.0 0.8 0.8 -9.5\n&quot; +&#10;                        &quot;-45.5 45.5 56.5 13.7\n&quot; +&#10;                        &quot;-10.7 11.9 2.2 1.2\n&quot; +&#10;                        &quot;3\n&quot; +&#10;                        &quot;3 5\n&quot; +&#10;                        &quot;1 4 5 6 6\n&quot; +&#10;                        &quot;7 8 9 0 0\n&quot; +&#10;                        &quot;4 1 2 2 2\n&quot; +&#10;                        &quot;5 2\n&quot; +&#10;                        &quot;4 5\n&quot; +&#10;                        &quot;6 1\n&quot; +&#10;                        &quot;6 0\n&quot; +&#10;                        &quot;0 9\n&quot; +&#10;                        &quot;7 7\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if diagonal transposition algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        1d, 6d, 4d,&#10;                        7d, 6d, 2d,&#10;                        7d, 4d, 1d,&#10;                    }))&#10;                .setInput(&#10;                    &quot;4\n&quot; +&#10;                        &quot;1\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;1 7 7\n&quot; +&#10;                        &quot;6 6 4\n&quot; +&#10;                        &quot;4 2 1\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if diagonal transposition algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        1d, 6d, 4d,&#10;                        7d, 6d, 5d,&#10;                        7d, 4d, 1d,&#10;                    }))&#10;                .setInput(&#10;                    &quot;4\n&quot; +&#10;                        &quot;1\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;1 7 7\n&quot; +&#10;                        &quot;6 6 4\n&quot; +&#10;                        &quot;4 5 1\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if diagonal transposition algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        1d, 6d, 4d,&#10;                        7d, 6d, 2d,&#10;                        7d, 4d, 1d,&#10;                    }))&#10;                .setInput(&#10;                    &quot;4\n&quot; +&#10;                        &quot;2\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;1 2 4\n&quot; +&#10;                        &quot;4 6 6\n&quot; +&#10;                        &quot;7 7 1\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if diagonal transposition algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        1d, 6d, 4d,&#10;                        7d, 6d, 5d,&#10;                        7d, 4d, 1d,&#10;                    }))&#10;                .setInput(&#10;                    &quot;4\n&quot; +&#10;                        &quot;2\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;1 5 4\n&quot; +&#10;                        &quot;4 6 6\n&quot; +&#10;                        &quot;7 7 1.0\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if transposition algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        2d, 4d, 5d, 6d,&#10;                        6d, 6d, 7d, 8d,&#10;                        5d, 0d, 0d, 1d,&#10;                        8d, 8d, 2d, 9d&#10;                    }))&#10;                .setInput(&#10;                    &quot;4\n&quot; +&#10;                        &quot;3\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;6 5 4 2\n&quot; +&#10;                        &quot;8 7 6 6\n&quot; +&#10;                        &quot;1 0 0 5.0\n&quot; +&#10;                        &quot;9 2 8 8\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if transposition algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        2d, 4d, 5d, 6d,&#10;                        6d, 6d, 7d, 8d,&#10;                        5d, 0d, 0d, 1d,&#10;                        8d, 8d, 2d, 9d&#10;                    }))&#10;                .setInput(&#10;                    &quot;4\n&quot; +&#10;                        &quot;4\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;8 8 2 9\n&quot; +&#10;                        &quot;5 0 0 1\n&quot; +&#10;                        &quot;6 6 7 8.0\n&quot; +&#10;                        &quot;2 4 5 6\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if determinant algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        31d&#10;                    }))&#10;                .setInput(&#10;                    &quot;5\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;1 2 3\n&quot; +&#10;                        &quot;4 5 7\n&quot; +&#10;                        &quot;10 22 23\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if determinant algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        45.2197d&#10;                    }))&#10;                .setInput(&#10;                    &quot;5\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;2.65 3.54 3.88 8.99\n&quot; +&#10;                        &quot;3.12 5.45 7.77 5.56\n&quot; +&#10;                        &quot;5.31 2.23 2.33 9.81\n&quot; +&#10;                        &quot;1.67 1.67 1.01 9.99\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if inversion algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        1.14717, 2.03717, 2.9711,&#10;                        2.19055, 4.52055, 7.20788,&#10;                        3.67009, 0.590087, 1.33819&#10;                    }))&#10;                .setInput(&#10;                    &quot;6\n&quot; +&#10;                        &quot;3 3\n&quot; +&#10;                        &quot;0.396796 -0.214938 0.276735\n&quot; +&#10;                        &quot;5.19655 -2.06983 -0.388886\n&quot; +&#10;                        &quot;-3.3797 1.50219 0.159794\n&quot; +&#10;                        &quot;0&quot;),&#10;&#10;            new TestCase&lt;TestClue&gt;()&#10;                .setAttach(new TestClue(&#10;                    &quot;Checking if inversion algorithm is correct&quot;,&#10;                    new Double[]{&#10;                        0.396796, -0.214938, 0.276735, -0.5092,&#10;                        5.19655, -2.06983, -0.388886, -3.14252,&#10;                        -3.3797, 1.50219, 0.159794, 2.04842,&#10;                        -0.593332, 0.230065, 0.00259267, 0.50345&#10;                    }))&#10;                .setInput(&#10;                    &quot;6\n&quot; +&#10;                        &quot;4 4\n&quot; +&#10;                        &quot;2.65 3.54 3.88 8.99\n&quot; +&#10;                        &quot;3.12 5.45 7.77 5.56\n&quot; +&#10;                        &quot;5.31 2.23 2.33 9.81\n&quot; +&#10;                        &quot;1.67 1.67 1.01 9.99\n&quot; +&#10;                        &quot;0&quot;)&#10;        );&#10;    }&#10;&#10;&#10;    @Override&#10;    public CheckResult check(String reply, TestClue clue) {&#10;&#10;        try {&#10;&#10;            String[] strNumbers = reply.lines()&#10;                .filter(line -&gt; {&#10;                    line = line.strip();&#10;                    if (line.length() == 0) {&#10;                        return false;&#10;                    }&#10;                    for (char c : line.toCharArray()) {&#10;                        if (!(c == ' ' ||&#10;                            c &gt;= '0' &amp;&amp; c &lt;= '9' ||&#10;                            c == '.' ||&#10;                            c == '-' || c == '+' ||&#10;                            c == 'e' || c == 'E')) {&#10;                            return false;&#10;                        }&#10;                    }&#10;                    return true;&#10;                }).reduce(&quot;&quot;, (a, b) -&gt; a + &quot; &quot; + b)&#10;                .strip().split(&quot;\\s+&quot;);&#10;&#10;            double[] actual = Arrays.stream(strNumbers).mapToDouble(Double::parseDouble).toArray();&#10;&#10;            double[] expected =&#10;                clue.answers.stream()&#10;                    .mapToDouble(e -&gt; e)&#10;                    .toArray();&#10;            if (actual.length != expected.length) {&#10;                return new CheckResult(false, clue.feedback);&#10;            }&#10;&#10;            for (int i = 0; i &lt; actual.length; i++) {&#10;                if (abs(actual[i] - expected[i]) &gt; 0.01) {&#10;                    return new CheckResult(false, clue.feedback);&#10;                }&#10;            }&#10;        }&#10;        catch (Exception ex) {&#10;            return new CheckResult(false, &quot;Can't check the answer&quot;);&#10;        }&#10;&#10;        return CheckResult.TRUE;&#10;&#10;    }&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/processor/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/processor/Main.java" />
                                <option name="text" value="package processor;&#10;&#10;import java.util.Scanner;&#10;&#10;public class Main {&#10;    private static Scanner scanner = new Scanner(System.in);&#10;    public static void main(String[] args) {&#10;        showMainMenu();&#10;&#10;    }&#10;&#10;    private static void showMainMenu() {&#10;        System.out.println(&quot;1. Add matrices\n&quot; +&#10;                &quot;2. Multiply matrix to a constant\n&quot; +&#10;                &quot;3. Multiply matrices\n&quot; +&#10;                &quot;4. Transpose matrix\n&quot; +&#10;                &quot;0. Exit\n&quot;);&#10;        System.out.print(&quot;Your choice: &quot;);&#10;        int choice = scanner.nextInt();&#10;&#10;        switch (choice) {&#10;            case 1:&#10;                addMatricesMenu();&#10;                break;&#10;            case 2:&#10;                multiplyMarixOnConstantMenu();&#10;                break;&#10;            case 3:&#10;                multiplyMatricesMenu();&#10;                break;&#10;            case 4:&#10;                transposeMatricesMenu();&#10;                break;&#10;            case 0:&#10;                return;&#10;            default:&#10;                showMainMenu();&#10;                break;&#10;        }&#10;    }&#10;&#10;    private static void addMatricesMenu() {&#10;        System.out.print(&quot;Enter size of first matrix: &quot;);&#10;        int n = scanner.nextInt();&#10;        int m = scanner.nextInt();&#10;        double[][] matrixA = fillMatrix(n, m);&#10;&#10;        System.out.print(&quot;Enter size of second matrix: &quot;);&#10;        n = scanner.nextInt();&#10;        m = scanner.nextInt();&#10;        double[][] matrixB = fillMatrix(n, m);&#10;&#10;        System.out.println(&quot;Adding result is:&quot;);&#10;        printMatrix(addMatrices(matrixA, matrixB));&#10;&#10;        showMainMenu();&#10;    }&#10;&#10;    private static void multiplyMarixOnConstantMenu() {&#10;        System.out.print(&quot;Enter size of the matrix: &quot;);&#10;        int n = scanner.nextInt();&#10;        int m = scanner.nextInt();&#10;        double[][] matrix = fillMatrix(n, m);&#10;&#10;        System.out.print(&quot;Enter the constant: &quot;);&#10;        double c = scanner.nextInt();&#10;&#10;        System.out.println(&quot;Multiplying on constant result is: &quot;);&#10;        printMatrix(multiplyOnConstant(matrix, c));&#10;&#10;        showMainMenu();&#10;    }&#10;&#10;    private static void multiplyMatricesMenu() {&#10;        System.out.print(&quot;Enter size of first matrix: &quot;);&#10;        int n = scanner.nextInt();&#10;        int m = scanner.nextInt();&#10;&#10;        System.out.println(&quot;Enter first matrix:&quot;);&#10;        double[][] matrixA = fillMatrix(n, m);&#10;&#10;        System.out.print(&quot;Enter size of second matrix: &quot;);&#10;        n = scanner.nextInt();&#10;        m = scanner.nextInt();&#10;&#10;        System.out.println(&quot;Enter second matrix:&quot;);&#10;        double[][] matrixB = fillMatrix(n, m);&#10;&#10;        System.out.println(&quot;The multiplication result is:&quot;);&#10;        printMatrix(multiplyMatrices(matrixA, matrixB));&#10;&#10;        showMainMenu();&#10;    }&#10;&#10;    private static void transposeMatricesMenu() {&#10;        System.out.println(&quot;1. Main diagonal\n&quot; +&#10;                &quot;2. Side diagonal\n&quot; +&#10;                &quot;3. Vertical line\n&quot; +&#10;                &quot;4. Horizontal line\n&quot;);&#10;        System.out.print(&quot;Your choice: &quot;);&#10;&#10;        int choice = scanner.nextInt();&#10;&#10;        System.out.print(&quot;Enter matrix size: &quot;);&#10;        int n = scanner.nextInt();&#10;        int m = scanner.nextInt();&#10;&#10;        System.out.println(&quot;Enter matrix:&quot;);&#10;        double[][] matrix = fillMatrix(n, m);&#10;&#10;        transposeMatrix(matrix, choice);&#10;&#10;        showMainMenu();&#10;    }&#10;&#10;    private static double[][] multiplyMatrices(double[][] matrixA, double[][] matrixB) {&#10;        double[][] result = null;&#10;        int nA = matrixA.length;&#10;        int mA = matrixA[0].length;&#10;        int nB = matrixB.length;&#10;        int mB = matrixB[0].length;&#10;&#10;        // check if matrices can be multiplied&#10;        if (mA == nB) {&#10;            result = new double[nA][mB];&#10;            double temp = 0;&#10;&#10;            for (int i = 0; i &lt; nA; i++) {&#10;                for (int j = 0; j &lt; mB; j++) {&#10;                    for (int k = 0; k &lt; nB; k++) {&#10;                        temp += matrixA[i][k] * matrixB[k][j];&#10;                    }&#10;                    result[i][j] = temp;&#10;                    temp = 0;&#10;                }&#10;            }&#10;        }&#10;        return result;&#10;    }&#10;&#10;    private static double[][] fillMatrix(int n, int m) {&#10;        double[][] matrix = new double[n][m];&#10;        for (int i = 0; i &lt; n; i++) {&#10;            for (int j = 0; j &lt; m; j++) {&#10;                matrix[i][j] = scanner.nextDouble();&#10;            }&#10;        }&#10;        return matrix;&#10;    }&#10;&#10;    private static void printMatrix(double[][] matrix) {&#10;        int n = matrix[0].length;&#10;        for (double[] ints : matrix) {&#10;            for (int j = 0; j &lt; n; j++) {&#10;                System.out.print(ints[j] + &quot; &quot;);&#10;            }&#10;            System.out.println();&#10;        }&#10;        System.out.println();&#10;    }&#10;&#10;    private static double[][] addMatrices (double[][] matrixA, double[][] matrixB) {&#10;        int n = matrixA.length;&#10;        int m = matrixA[0].length;&#10;&#10;        double[][] result;&#10;&#10;        if (n != matrixB.length &amp;&amp; m != matrixB[0].length) {&#10;            result = null;&#10;        }&#10;        else {&#10;            result = new double[n][m];&#10;            for (int i = 0; i &lt; n; i++) {&#10;                for (int j = 0; j &lt; m; j++) {&#10;                    result[i][j] = matrixA[i][j] + matrixB[i][j];&#10;                }&#10;            }&#10;        }&#10;&#10;        return result;&#10;    }&#10;&#10;    private static double[][] multiplyOnConstant (double[][] matrix, double constant) {&#10;        int n = matrix.length;&#10;        int m = matrix[0].length;&#10;&#10;        for (int i = 0; i &lt; n; i++) {&#10;            for (int j = 0; j &lt; m; j++) {&#10;                matrix[i][j] *= constant;&#10;            }&#10;        }&#10;&#10;        return matrix;&#10;    }&#10;&#10;    private static void transposeMatrix (double[][] matrix, int choice) {&#10;        int m = matrix.length;&#10;        int n = matrix[0].length;&#10;        double[][] result = null;&#10;&#10;        switch (choice) {&#10;            case 1:&#10;                if (m == n) {&#10;                    result = transposeMatrixMainDiagonal(matrix);&#10;                } else {&#10;                    result = null;&#10;                }&#10;                break;&#10;            case 2:&#10;                if (m == n) {&#10;                    result = transposeMatrixSideDiagonal(matrix);&#10;                } else {&#10;                    result = null;&#10;                }&#10;                break;&#10;            case 3:&#10;                result = transposeMatrixVerticalLine(matrix);&#10;                break;&#10;            case 4:&#10;                result = transposeMatrixHorizontalLine(matrix);&#10;                break;&#10;            default:&#10;                break;&#10;        }&#10;&#10;        if (result == null) {&#10;            System.out.println(&quot;Operation not supported&quot;);&#10;        }&#10;        else {&#10;            printMatrix(result);&#10;        }&#10;    }&#10;&#10;    private static double[][] transposeMatrixMainDiagonal (double[][] matrix) {&#10;        int n = matrix.length;&#10;        double[][] result = new double[n][n];&#10;&#10;        for (int i = 0; i &lt; n; i++) {&#10;            for (int j = 0; j &lt; n; j++) {&#10;                result[i][j] = matrix[j][i];&#10;            }&#10;        }&#10;&#10;        return result;&#10;    }&#10;&#10;    private static double[][] transposeMatrixSideDiagonal (double[][] matrix) {&#10;        int n = matrix.length;&#10;        double[][] result = new double[n][n];&#10;&#10;        for (int i = 0; i &lt; n; i++) {&#10;            for (int j = 0; j &lt; n; j++) {&#10;                result[i][j] = matrix[n - j - 1][n - i - 1];&#10;            }&#10;        }&#10;&#10;        return result;&#10;    }&#10;&#10;    private static double[][] transposeMatrixVerticalLine (double[][] matrix) {&#10;        int n = matrix.length;&#10;        int m = matrix[0].length;&#10;        double[][] result = new double[n][m];&#10;&#10;        for (int i = 0; i &lt; n; i++) {&#10;            for (int j = 0; j &lt; m; j++) {&#10;                result[i][j] = matrix[i][m - j - 1];&#10;            }&#10;        }&#10;&#10;        return result;&#10;    }&#10;&#10;    private static double[][] transposeMatrixHorizontalLine (double[][] matrix) {&#10;        int n = matrix.length;&#10;        int m = matrix[0].length;&#10;        double[][] result = new double[n][m];&#10;&#10;        for (int i = 0; i &lt; n; i++) {&#10;            result[i] = matrix[n - i - 1];&#10;        }&#10;&#10;        return result;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1559846286000" />
                    </EduTask>
                  </list>
                </option>
              </FrameworkLesson>
            </list>
          </option>
        </HyperskillCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>